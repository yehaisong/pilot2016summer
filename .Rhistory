pilot.data$GVA_LP_V<-pilot.data$GVA_LP_sd^2
#calculate learning performance variance group vv
pilot.data$GVV_LP_V<-pilot.data$GVV_LP_sd^2
#calculate learning performance sample covariance
pilot.data$LP_V<-(pilot.data$GVA_LP_sd^2*(pilot.data$GVA_n-1)+pilot.data$GVV_LP_sd^2*(pilot.data$GVV_n-1))/(pilot.data$GVA_n+pilot.data$GVV_n-2)
#calculate learning performance variance group va
pilot.data$GVA_CL_V<-pilot.data$GVA_CL_sd^2
#calculate learning performance varnce group vv
pilot.data$GVV_CL_V<-pilot.data$GVV_CL_sd^2
#calculate cognitive load sample covariance
pilot.data$CL_V<-(pilot.data$GVA_CL_sd^2*(pilot.data$GVA_n-1)+pilot.data$GVV_CL_sd^2*(pilot.data$GVV_n-1))/(pilot.data$GVA_n+pilot.data$GVV_n-2)
library(metaSEM)
##Multiple-endpoint studies
#control group
lower <- '10.24
0, 1.9321'
##Convert a lower triangle data into a covariance matrix
Cov1<-getCov(lower, diag=TRUE, name=c("LP","CL"))
##treatment group
lower <- '12.6736
0, 2.25'
##Convert a lower triangle data into a covraiance matrix
Cov2<-getCov(lower, diag=TRUE,name=c("LP","CL"))
#Convert covariance matrices into a list
Cov<-list(Cov1,Cov2)
#Means for the two groups
Mean<-list(c(5.50,4.05),c(5.55,3.43))
#Sample sizes for the gorups
N <-c(20,16)
#Assuming homogeneity of covariance matrices by
#using the same lables: "sd1", "sd2", and "r"
model4<-'eta1=~c("sd1","sd1")*x1
eta2=~c("sd2","sd2")*x2
eta1~~c("r","r")*eta2
x1~c("m1_1","m1_2")*1
x2~c("m2_1","m2_2")*1
x1~~0*x1
x2~~0*x2
# Multiple endpoint effect size 1
ME1:=(m1_2 - m1_1)/sd1
#Multiple endpoint effect size 2
ME2:=(m2_2 - m2_1)/sd2'
fit4<-sem(model4, sample.cov = Cov, sample.mean = Mean,
sample.nobs = N,std.lv = TRUE,
sample.cov.rescale = FALSE)
##Obtain the free parameters in the model
(x<-fit4@Fit@x)
##Obtain the sampling covariance matrix of the parameter estimates
(VCOV<-vcov(fit4))
##Compute the multivariate effect sizes
(ME<-fit4@Model@def.function(x))
##Compute the jacobian for 'defined parameters'
JAC<-lavaan:::lavJacobianD(func=fit4@Model@def.function, x=x)
##compute the sampling covariance matrix using delta method
ME.VCOV<-JAC%*% VCOV %*% t(JAC)
##Add the variable names for ease of reference
dimnames(ME.VCOV) <- list(names(ME),names(ME))
ME.VCOV
library("lavaan")
install.packages("lavaan")
library("lavaan")
##Multiple-endpoint studies
#control group
lower <- '10.24
0, 1.9321'
##Convert a lower triangle data into a covariance matrix
Cov1<-getCov(lower, diag=TRUE, name=c("LP","CL"))
##treatment group
lower <- '12.6736
0, 2.25'
##Convert a lower triangle data into a covraiance matrix
Cov2<-getCov(lower, diag=TRUE,name=c("LP","CL"))
#Convert covariance matrices into a list
Cov<-list(Cov1,Cov2)
#Means for the two groups
Mean<-list(c(5.50,4.05),c(5.55,3.43))
#Sample sizes for the gorups
N <-c(20,16)
#Assuming homogeneity of covariance matrices by
#using the same lables: "sd1", "sd2", and "r"
model4<-'eta1=~c("sd1","sd1")*x1
eta2=~c("sd2","sd2")*x2
eta1~~c("r","r")*eta2
x1~c("m1_1","m1_2")*1
x2~c("m2_1","m2_2")*1
x1~~0*x1
x2~~0*x2
# Multiple endpoint effect size 1
ME1:=(m1_2 - m1_1)/sd1
#Multiple endpoint effect size 2
ME2:=(m2_2 - m2_1)/sd2'
fit4<-sem(model4, sample.cov = Cov, sample.mean = Mean,
sample.nobs = N,std.lv = TRUE,
sample.cov.rescale = FALSE)
##Obtain the free parameters in the model
(x<-fit4@Fit@x)
##Obtain the sampling covariance matrix of the parameter estimates
(VCOV<-vcov(fit4))
##Compute the multivariate effect sizes
(ME<-fit4@Model@def.function(x))
##Compute the jacobian for 'defined parameters'
JAC<-lavaan:::lavJacobianD(func=fit4@Model@def.function, x=x)
##compute the sampling covariance matrix using delta method
ME.VCOV<-JAC%*% VCOV %*% t(JAC)
##Add the variable names for ease of reference
dimnames(ME.VCOV) <- list(names(ME),names(ME))
ME.VCOV
#control group
lower <- '10.24
0, 1.9321'
##Convert a lower triangle data into a covariance matrix
Cov1<-getCov(lower, diag=TRUE, name=c("LP","CL"))
##treatment group
lower <- '12.6736
0, 2.25'
##Convert a lower triangle data into a covraiance matrix
Cov2<-getCov(lower, diag=TRUE,name=c("LP","CL"))
#Convert covariance matrices into a list
Cov<-list(Cov1,Cov2)
#Means for the two groups
Mean<-list(c(5.50,4.05),c(5.55,3.43))
#Sample sizes for the gorups
N <-c(20,16)
#Assuming homogeneity of covariance matrices by
#using the same lables: "sd1", "sd2", and "r"
model4<-'eta1=~c("sd1","sd1")*LP
eta2=~c("sd2","sd2")*CL
eta1~~c("r","r")*eta2
LP~c("m1_1","m1_2")*1
CL~c("m2_1","m2_2")*1
LP~~0*LP
CL~~0*CL
# Multiple endpoint effect size 1
ME1:=(m1_2 - m1_1)/sd1
#Multiple endpoint effect size 2
ME2:=(m2_2 - m2_1)/sd2'
fit4<-sem(model4, sample.cov = Cov, sample.mean = Mean,
sample.nobs = N,std.lv = TRUE,
sample.cov.rescale = FALSE)
##Obtain the free parameters in the model
(x<-fit4@Fit@x)
##Obtain the sampling covariance matrix of the parameter estimates
(VCOV<-vcov(fit4))
##Compute the multivariate effect sizes
(ME<-fit4@Model@def.function(x))
##Compute the jacobian for 'defined parameters'
JAC<-lavaan:::lavJacobianD(func=fit4@Model@def.function, x=x)
##compute the sampling covariance matrix using delta method
ME.VCOV<-JAC%*% VCOV %*% t(JAC)
##Add the variable names for ease of reference
dimnames(ME.VCOV) <- list(names(ME),names(ME))
ME.VCOV
##Multiple-endpoint studies
#control group
lower <- '10.24
0, 1.9321'
##Convert a lower triangle data into a covariance matrix
Cov1<-getCov(lower, diag=TRUE, name=c("LP","CL"))
##treatment group
lower <- '12.6736
0, 2.25'
##Convert a lower triangle data into a covraiance matrix
Cov2<-getCov(lower, diag=TRUE,name=c("LP","CL"))
#Convert covariance matrices into a list
Cov<-list(Cov1,Cov2)
#Means for the two groups
Mean<-list(c(5.50,4.05),c(5.55,3.43))
#Sample sizes for the gorups
N <-c(20,16)
#Assuming homogeneity of covariance matrices by
#using the same lables: "sd1", "sd2", and "r"
model4<-'eta1=~c("sd1","sd1")*LP
eta2=~c("sd2","sd2")*CL
eta1~~c("r","r")*eta2
LP~c("m1_1","m1_2")*1
CL~c("m2_1","m2_2")*1
LP~~0*LP
CL~~0*CL
# Multiple endpoint effect size 1
MELP:=(m1_2 - m1_1)/sd1
#Multiple endpoint effect size 2
MECL:=(m2_2 - m2_1)/sd2'
fit4<-sem(model4, sample.cov = Cov, sample.mean = Mean,
sample.nobs = N,std.lv = TRUE,
sample.cov.rescale = FALSE)
##Obtain the free parameters in the model
(x<-fit4@Fit@x)
##Obtain the sampling covariance matrix of the parameter estimates
(VCOV<-vcov(fit4))
##Compute the multivariate effect sizes
(ME<-fit4@Model@def.function(x))
##Compute the jacobian for 'defined parameters'
JAC<-lavaan:::lavJacobianD(func=fit4@Model@def.function, x=x)
##compute the sampling covariance matrix using delta method
ME.VCOV<-JAC%*% VCOV %*% t(JAC)
##Add the variable names for ease of reference
dimnames(ME.VCOV) <- list(names(ME),names(ME))
ME.VCOV
##Multiple-endpoint studies
#control group
lower <- '10.24
1, 1.9321'
##Convert a lower triangle data into a covariance matrix
Cov1<-getCov(lower, diag=TRUE, name=c("LP","CL"))
##treatment group
lower <- '12.6736
1, 2.25'
##Convert a lower triangle data into a covraiance matrix
Cov2<-getCov(lower, diag=TRUE,name=c("LP","CL"))
#Convert covariance matrices into a list
Cov<-list(Cov1,Cov2)
#Means for the two groups
Mean<-list(c(5.50,4.05),c(5.55,3.43))
#Sample sizes for the gorups
N <-c(20,16)
#Assuming homogeneity of covariance matrices by
#using the same lables: "sd1", "sd2", and "r"
model4<-'eta1=~c("sd1","sd1")*LP
eta2=~c("sd2","sd2")*CL
eta1~~c("r","r")*eta2
LP~c("m1_1","m1_2")*1
CL~c("m2_1","m2_2")*1
LP~~0*LP
CL~~0*CL
# Multiple endpoint effect size 1
MELP:=(m1_2 - m1_1)/sd1
#Multiple endpoint effect size 2
MECL:=(m2_2 - m2_1)/sd2'
fit4<-sem(model4, sample.cov = Cov, sample.mean = Mean,
sample.nobs = N,std.lv = TRUE,
sample.cov.rescale = FALSE)
##Obtain the free parameters in the model
(x<-fit4@Fit@x)
##Obtain the sampling covariance matrix of the parameter estimates
(VCOV<-vcov(fit4))
##Compute the multivariate effect sizes
(ME<-fit4@Model@def.function(x))
##Compute the jacobian for 'defined parameters'
JAC<-lavaan:::lavJacobianD(func=fit4@Model@def.function, x=x)
##compute the sampling covariance matrix using delta method
ME.VCOV<-JAC%*% VCOV %*% t(JAC)
##Add the variable names for ease of reference
dimnames(ME.VCOV) <- list(names(ME),names(ME))
ME.VCOV
#control group
lower <- '10.24
10, 1.9321'
##Convert a lower triangle data into a covariance matrix
Cov1<-getCov(lower, diag=TRUE, name=c("LP","CL"))
##treatment group
lower <- '12.6736
10, 2.25'
##Convert a lower triangle data into a covraiance matrix
Cov2<-getCov(lower, diag=TRUE,name=c("LP","CL"))
#Convert covariance matrices into a list
Cov<-list(Cov1,Cov2)
#Means for the two groups
Mean<-list(c(5.50,4.05),c(5.55,3.43))
#Sample sizes for the gorups
N <-c(20,16)
#Assuming homogeneity of covariance matrices by
#using the same lables: "sd1", "sd2", and "r"
model4<-'eta1=~c("sd1","sd1")*LP
eta2=~c("sd2","sd2")*CL
eta1~~c("r","r")*eta2
LP~c("m1_1","m1_2")*1
CL~c("m2_1","m2_2")*1
LP~~0*LP
CL~~0*CL
# Multiple endpoint effect size 1
MELP:=(m1_2 - m1_1)/sd1
#Multiple endpoint effect size 2
MECL:=(m2_2 - m2_1)/sd2'
fit4<-sem(model4, sample.cov = Cov, sample.mean = Mean,
sample.nobs = N,std.lv = TRUE,
sample.cov.rescale = FALSE)
##Obtain the free parameters in the model
(x<-fit4@Fit@x)
##Obtain the sampling covariance matrix of the parameter estimates
(VCOV<-vcov(fit4))
##Compute the multivariate effect sizes
(ME<-fit4@Model@def.function(x))
##Compute the jacobian for 'defined parameters'
JAC<-lavaan:::lavJacobianD(func=fit4@Model@def.function, x=x)
##compute the sampling covariance matrix using delta method
ME.VCOV<-JAC%*% VCOV %*% t(JAC)
##Add the variable names for ease of reference
dimnames(ME.VCOV) <- list(names(ME),names(ME))
ME.VCOV
0, 2.25'
#control group
lower <- '10.24
0, 1.9321'
##Convert a lower triangle data into a covariance matrix
Cov1<-getCov(lower, diag=TRUE, name=c("LP","CL"))
##treatment group
lower <- '12.6736
0, 2.25'
##Convert a lower triangle data into a covraiance matrix
Cov2<-getCov(lower, diag=TRUE,name=c("LP","CL"))
#Convert covariance matrices into a list
Cov<-list(Cov1,Cov2)
#Means for the two groups
Mean<-list(c(5.50,4.05),c(5.55,3.43))
#Sample sizes for the gorups
N <-c(20,16)
#Assuming homogeneity of covariance matrices by
#using the same lables: "sd1", "sd2", and "r"
model4<-'eta1=~c("sd1","sd1")*LP
eta2=~c("sd2","sd2")*CL
eta1~~c("r","r")*eta2
LP~c("m1_1","m1_2")*1
CL~c("m2_1","m2_2")*1
LP~~0*LP
CL~~0*CL
# Multiple endpoint effect size 1
MELP:=(m1_2 - m1_1)/sd1
#Multiple endpoint effect size 2
MECL:=(m2_2 - m2_1)/sd2'
fit4<-sem(model4, sample.cov = Cov, sample.mean = Mean,
sample.nobs = N,std.lv = TRUE,
sample.cov.rescale = FALSE)
##Obtain the free parameters in the model
(x<-fit4@Fit@x)
##Obtain the sampling covariance matrix of the parameter estimates
(VCOV<-vcov(fit4))
##Compute the multivariate effect sizes
(ME<-fit4@Model@def.function(x))
##Compute the jacobian for 'defined parameters'
JAC<-lavaan:::lavJacobianD(func=fit4@Model@def.function, x=x)
##compute the sampling covariance matrix using delta method
ME.VCOV<-JAC%*% VCOV %*% t(JAC)
##Add the variable names for ease of reference
dimnames(ME.VCOV) <- list(names(ME),names(ME))
ME.VCOV
#control group
lower <- '0.0529
0, 0.04
0,0,0.0529'
##Convert a lower triangle data into a covariance matrix
Cov1<-getCov(lower, diag=TRUE, name=c("LP","CL"))
##treatment group
lower <- '0.0576
0, 0.0441
0,0,0.0576'
##Convert a lower triangle data into a covraiance matrix
Cov2<-getCov(lower, diag=TRUE,name=c("LP","CL"))
#Convert covariance matrices into a list
Cov<-list(Cov1,Cov2)
#Means for the two groups
Mean<-list(c(9.66,2.47,2.78),c(9.09,1.73,2.13))
#Sample sizes for the gorups
N <-c(16,15)
#Assuming homogeneity of covariance matrices by
#using the same lables: "sd1", "sd2", and "r"
model4<-'eta1=~c("sd1","sd1")*LP
eta2=~c("sd2","sd2")*CL
eta1~~c("r","r")*eta2
LP~c("m1_1","m1_2")*1
CL~c("m2_1","m2_2")*1
LP~~0*LP
CL~~0*CL
# Multiple endpoint effect size 1
MELP:=(m1_2 - m1_1)/sd1
#Multiple endpoint effect size 2
MECL:=(m2_2 - m2_1)/sd2'
fit4<-sem(model4, sample.cov = Cov, sample.mean = Mean,
sample.nobs = N,std.lv = TRUE,
sample.cov.rescale = FALSE)
##Obtain the free parameters in the model
(x<-fit4@Fit@x)
##Obtain the sampling covariance matrix of the parameter estimates
(VCOV<-vcov(fit4))
##Compute the multivariate effect sizes
(ME<-fit4@Model@def.function(x))
##Compute the jacobian for 'defined parameters'
JAC<-lavaan:::lavJacobianD(func=fit4@Model@def.function, x=x)
##compute the sampling covariance matrix using delta method
ME.VCOV<-JAC%*% VCOV %*% t(JAC)
##Add the variable names for ease of reference
dimnames(ME.VCOV) <- list(names(ME),names(ME))
ME.VCOV
ME<-c((pilot.data$GVA_LP_m-pilot.data$GVV_LP_m)/sqrt(pilot.data$LP_V),(pilot.data$GVA_CL_m-pilot.data$GVV_CL_m)/sqrt(pilot.data$CL_V))
print(ME)
ME<-c((pilot.data$GVA_LP_m-pilot.data$GVV_LP_m)/sqrt(pilot.data$LP_V),(pilot.data$GVA_CL_m-pilot.data$GVV_CL_m)/sqrt(pilot.data$CL_V),ncol=2)
print(ME)
ME<-matrix((pilot.data$GVA_LP_m-pilot.data$GVV_LP_m)/sqrt(pilot.data$LP_V),(pilot.data$GVA_CL_m-pilot.data$GVV_CL_m)/sqrt(pilot.data$CL_V),ncol=2)
ME<-matrix(c(((pilot.data$GVA_LP_m-pilot.data$GVV_LP_m)/sqrt(pilot.data$LP_V),(pilot.data$GVA_CL_m-pilot.data$GVV_CL_m)/sqrt(pilot.data$CL_V)),ncol=2)
ME<-matrix(c((pilot.data$GVA_LP_m-pilot.data$GVV_LP_m)/sqrt(pilot.data$LP_V),(pilot.data$GVA_CL_m-pilot.data$GVV_CL_m)/sqrt(pilot.data$CL_V)),ncol=2)
print(ME)
r<-0
MEVCOV<-matrix(c((1/pilot.data$GVA_n+1/pilot.data$GVV_n+((pilot.data$GVA_LP_m-pilot.data$GVV_LP_m)/sqrt(pilot.data$LP_V)^2/2*(pilot.data$GVA_n+pilot.data$GVV_n)))
,(1/pilot.data$GVA_n+1/pilot.data$GVV_n)*r+(((pilot.data$GVA_CL_m-pilot.data$GVV_CL_m)/sqrt(pilot.data$CL_V)*(pilot.data$GVA_LP_m-pilot.data$GVV_LP_m)/sqrt(pilot.data$LP_V))/2*(pilot.data$GVA_n+pilot.data$GVV_n))*(r^2)
,(1/pilot.data$GVA_n+1/pilot.data$GVV_n+((pilot.data$GVA_CL_m-pilot.data$GVV_CL_m)/sqrt(pilot.data$CL_V)^2/2*(pilot.data$GVA_n+pilot.data$GVV_n)))
),ncol=3)
print(MEVCOV)
meta(ME,MEVCOV)
result<-meta(ME,MEVCOV)
summary(result)
result<-meta(ME,MEVCOV,model.name="Random effects model")
summary(result)
print(MEVCOV)
lower
lower <- '10.24
0, 1.9321'
lower
r<-0
MEVCOV<-matrix(c((1/pilot.data$GVA_n+1/pilot.data$GVV_n+(((pilot.data$GVA_LP_m-pilot.data$GVV_LP_m)/sqrt(pilot.data$LP_V))^2/2*(pilot.data$GVA_n+pilot.data$GVV_n)))
,(1/pilot.data$GVA_n+1/pilot.data$GVV_n)*r+(((pilot.data$GVA_CL_m-pilot.data$GVV_CL_m)/sqrt(pilot.data$CL_V)*(pilot.data$GVA_LP_m-pilot.data$GVV_LP_m)/sqrt(pilot.data$LP_V))/2*(pilot.data$GVA_n+pilot.data$GVV_n))*(r^2)
,(1/pilot.data$GVA_n+1/pilot.data$GVV_n+(((pilot.data$GVA_CL_m-pilot.data$GVV_CL_m)/sqrt(pilot.data$CL_V))^2/2*(pilot.data$GVA_n+pilot.data$GVV_n)))
),ncol=3)
print(MEVCOV)
r<-0
MEVCOV<-matrix(c((1/pilot.data$GVA_n+1/pilot.data$GVV_n+(((pilot.data$GVA_LP_m-pilot.data$GVV_LP_m)/sqrt(pilot.data$LP_V))^2/2*(pilot.data$GVA_n+pilot.data$GVV_n)))
,(1/pilot.data$GVA_n+1/pilot.data$GVV_n)*r+(((pilot.data$GVA_CL_m-pilot.data$GVV_CL_m)/sqrt(pilot.data$CL_V)*(pilot.data$GVA_LP_m-pilot.data$GVV_LP_m)/sqrt(pilot.data$LP_V))/2*(pilot.data$GVA_n+pilot.data$GVV_n))*(r^2)
,(1/pilot.data$GVA_n+1/pilot.data$GVV_n+(((pilot.data$GVA_CL_m-pilot.data$GVV_CL_m)/sqrt(pilot.data$CL_V))^2/2*(pilot.data$GVA_n+pilot.data$GVV_n)))
),ncol=3)
print(ME)
print(MEVCOV)
MEVCOV<-matrix(c((1/pilot.data$GVA_n+1/pilot.data$GVV_n+((((pilot.data$GVA_LP_m-pilot.data$GVV_LP_m)/sqrt(pilot.data$LP_V))^2)/2*(pilot.data$GVA_n+pilot.data$GVV_n)))
,(1/pilot.data$GVA_n+1/pilot.data$GVV_n)*r+(((pilot.data$GVA_CL_m-pilot.data$GVV_CL_m)/sqrt(pilot.data$CL_V)*(pilot.data$GVA_LP_m-pilot.data$GVV_LP_m)/sqrt(pilot.data$LP_V))/2*(pilot.data$GVA_n+pilot.data$GVV_n))*(r^2)
,(1/pilot.data$GVA_n+1/pilot.data$GVV_n+((((pilot.data$GVA_CL_m-pilot.data$GVV_CL_m)/sqrt(pilot.data$CL_V))^2)/2*(pilot.data$GVA_n+pilot.data$GVV_n)))
),ncol=3)
print(MEVCOV)
MEVCOV<-matrix(c((1/pilot.data$GVA_n+1/pilot.data$GVV_n+((ME[,1])^2/2*(pilot.data$GVA_n+pilot.data$GVV_n)))
,(1/pilot.data$GVA_n+1/pilot.data$GVV_n)*r+(((pilot.data$GVA_CL_m-pilot.data$GVV_CL_m)/sqrt(pilot.data$CL_V)*(pilot.data$GVA_LP_m-pilot.data$GVV_LP_m)/sqrt(pilot.data$LP_V))/2*(pilot.data$GVA_n+pilot.data$GVV_n))*(r^2)
,(1/pilot.data$GVA_n+1/pilot.data$GVV_n+((ME[,2])^2/2*(pilot.data$GVA_n+pilot.data$GVV_n)))
),ncol=3)
print(MEVCOV)
MEVCOV<-matrix(c((1/pilot.data$GVA_n+1/pilot.data$GVV_n+(1/2*(pilot.data$GVA_n+pilot.data$GVV_n)))
MEVCOV<-matrix(c((1/pilot.data$GVA_n+1/pilot.data$GVV_n+(1/2*(pilot.data$GVA_n+pilot.data$GVV_n)))
,(1/pilot.data$GVA_n+1/pilot.data$GVV_n)*r+(((pilot.data$GVA_CL_m-pilot.data$GVV_CL_m)/sqrt(pilot.data$CL_V)*(pilot.data$GVA_LP_m-pilot.data$GVV_LP_m)/sqrt(pilot.data$LP_V))/2*(pilot.data$GVA_n+pilot.data$GVV_n))*(r^2)
,(1/pilot.data$GVA_n+1/pilot.data$GVV_n+((ME[,2])^2/2*(pilot.data$GVA_n+pilot.data$GVV_n)))
),ncol=3)
MEVCOV<-matrix(c((1/pilot.data$GVA_n+1/pilot.data$GVV_n+(1/2*(pilot.data$GVA_n+pilot.data$GVV_n)))
,(1/pilot.data$GVA_n+1/pilot.data$GVV_n)*r+(((pilot.data$GVA_CL_m-pilot.data$GVV_CL_m)/sqrt(pilot.data$CL_V)*(pilot.data$GVA_LP_m-pilot.data$GVV_LP_m)/sqrt(pilot.data$LP_V))/2*(pilot.data$GVA_n+pilot.data$GVV_n))*(r^2)
,(1/pilot.data$GVA_n+1/pilot.data$GVV_n+((ME[,2])^2/2*(pilot.data$GVA_n+pilot.data$GVV_n)))
),ncol=3)
print(MEVCOV)
MEVCOV<-matrix(c(((1/pilot.data$GVA_n)+(1/pilot.data$GVV_n)+(1/2*(pilot.data$GVA_n+pilot.data$GVV_n)))
,(1/pilot.data$GVA_n+1/pilot.data$GVV_n)*r+(((pilot.data$GVA_CL_m-pilot.data$GVV_CL_m)/sqrt(pilot.data$CL_V)*(pilot.data$GVA_LP_m-pilot.data$GVV_LP_m)/sqrt(pilot.data$LP_V))/2*(pilot.data$GVA_n+pilot.data$GVV_n))*(r^2)
,(1/pilot.data$GVA_n+1/pilot.data$GVV_n+((ME[,2])^2/2*(pilot.data$GVA_n+pilot.data$GVV_n)))
),ncol=3)
print(MEVCOV)
1/pilot.data$GVA_n
1/pilot.data$GVA_n+1/pilot.data$GVV_n
1/pilot.data$GVA_n+1/pilot.data$GVV_n++(1/2*(pilot.data$GVA_n+pilot.data$GVV_n))
(1/2*(pilot.data$GVA_n+pilot.data$GVV_n))
(1/(2*(pilot.data$GVA_n+pilot.data$GVV_n))
1/(2*(pilot.data$GVA_n+pilot.data$GVV_n))
x<-1/(2*(pilot.data$GVA_n+pilot.data$GVV_n))
print(x)
MEVCOV<-matrix(c(((1/pilot.data$GVA_n)+(1/pilot.data$GVV_n)+(ME[,1]^2/(2*(pilot.data$GVA_n+pilot.data$GVV_n))))
,(1/pilot.data$GVA_n+1/pilot.data$GVV_n)*r+(((pilot.data$GVA_CL_m-pilot.data$GVV_CL_m)/sqrt(pilot.data$CL_V)*(pilot.data$GVA_LP_m-pilot.data$GVV_LP_m)/sqrt(pilot.data$LP_V))/2*(pilot.data$GVA_n+pilot.data$GVV_n))*(r^2)
,(1/pilot.data$GVA_n+1/pilot.data$GVV_n+((ME[,2])^2/(2*(pilot.data$GVA_n+pilot.data$GVV_n))))
),ncol=3)
print(MEVCOV)
result<-meta(ME,MEVCOV,model.name="Random effects model")
summary(result)
1.810071 0.777015'
lower<-'5.906044
1.810071 0.777015'
Cov1<-getCov(lower, diag=TRUE)
View(Cov1)
cov2cor(Cov1)
r<-1
MEVCOV<-matrix(c(((1/pilot.data$GVA_n)+(1/pilot.data$GVV_n)+(ME[,1]^2/(2*(pilot.data$GVA_n+pilot.data$GVV_n))))
,(1/pilot.data$GVA_n+1/pilot.data$GVV_n)*r+(((pilot.data$GVA_CL_m-pilot.data$GVV_CL_m)/sqrt(pilot.data$CL_V)*(pilot.data$GVA_LP_m-pilot.data$GVV_LP_m)/sqrt(pilot.data$LP_V))/2*(pilot.data$GVA_n+pilot.data$GVV_n))*(r^2)
,(1/pilot.data$GVA_n+1/pilot.data$GVV_n+((ME[,2])^2/(2*(pilot.data$GVA_n+pilot.data$GVV_n))))
),ncol=3)
result<-meta(ME,MEVCOV,model.name="Random effects model")
summary(result)
r<-0.9
MEVCOV<-matrix(c(((1/pilot.data$GVA_n)+(1/pilot.data$GVV_n)+(ME[,1]^2/(2*(pilot.data$GVA_n+pilot.data$GVV_n))))
,(1/pilot.data$GVA_n+1/pilot.data$GVV_n)*r+(((pilot.data$GVA_CL_m-pilot.data$GVV_CL_m)/sqrt(pilot.data$CL_V)*(pilot.data$GVA_LP_m-pilot.data$GVV_LP_m)/sqrt(pilot.data$LP_V))/2*(pilot.data$GVA_n+pilot.data$GVV_n))*(r^2)
,(1/pilot.data$GVA_n+1/pilot.data$GVV_n+((ME[,2])^2/(2*(pilot.data$GVA_n+pilot.data$GVV_n))))
),ncol=3)
result<-meta(ME,MEVCOV,model.name="Random effects model")
summary(result)
r<-0.25
MEVCOV<-matrix(c(((1/pilot.data$GVA_n)+(1/pilot.data$GVV_n)+(ME[,1]^2/(2*(pilot.data$GVA_n+pilot.data$GVV_n))))
,(1/pilot.data$GVA_n+1/pilot.data$GVV_n)*r+(((pilot.data$GVA_CL_m-pilot.data$GVV_CL_m)/sqrt(pilot.data$CL_V)*(pilot.data$GVA_LP_m-pilot.data$GVV_LP_m)/sqrt(pilot.data$LP_V))/2*(pilot.data$GVA_n+pilot.data$GVV_n))*(r^2)
,(1/pilot.data$GVA_n+1/pilot.data$GVV_n+((ME[,2])^2/(2*(pilot.data$GVA_n+pilot.data$GVV_n))))
),ncol=3)
result<-meta(ME,MEVCOV,model.name="Random effects model")
summary(result)
r<-0.01
MEVCOV<-matrix(c(((1/pilot.data$GVA_n)+(1/pilot.data$GVV_n)+(ME[,1]^2/(2*(pilot.data$GVA_n+pilot.data$GVV_n))))
,(1/pilot.data$GVA_n+1/pilot.data$GVV_n)*r+(((pilot.data$GVA_CL_m-pilot.data$GVV_CL_m)/sqrt(pilot.data$CL_V)*(pilot.data$GVA_LP_m-pilot.data$GVV_LP_m)/sqrt(pilot.data$LP_V))/2*(pilot.data$GVA_n+pilot.data$GVV_n))*(r^2)
,(1/pilot.data$GVA_n+1/pilot.data$GVV_n+((ME[,2])^2/(2*(pilot.data$GVA_n+pilot.data$GVV_n))))
),ncol=3)
summary(result)
r<-0
MEVCOV<-matrix(c(((1/pilot.data$GVA_n)+(1/pilot.data$GVV_n)+(ME[,1]^2/(2*(pilot.data$GVA_n+pilot.data$GVV_n))))
,(1/pilot.data$GVA_n+1/pilot.data$GVV_n)*r+(((pilot.data$GVA_CL_m-pilot.data$GVV_CL_m)/sqrt(pilot.data$CL_V)*(pilot.data$GVA_LP_m-pilot.data$GVV_LP_m)/sqrt(pilot.data$LP_V))/2*(pilot.data$GVA_n+pilot.data$GVV_n))*(r^2)
,(1/pilot.data$GVA_n+1/pilot.data$GVV_n+((ME[,2])^2/(2*(pilot.data$GVA_n+pilot.data$GVV_n))))
),ncol=3)
summary(result)
r<-0.25
MEVCOV<-matrix(c(((1/pilot.data$GVA_n)+(1/pilot.data$GVV_n)+(ME[,1]^2/(2*(pilot.data$GVA_n+pilot.data$GVV_n))))
,(1/pilot.data$GVA_n+1/pilot.data$GVV_n)*r+(((pilot.data$GVA_CL_m-pilot.data$GVV_CL_m)/sqrt(pilot.data$CL_V)*(pilot.data$GVA_LP_m-pilot.data$GVV_LP_m)/sqrt(pilot.data$LP_V))/2*(pilot.data$GVA_n+pilot.data$GVV_n))*(r^2)
,(1/pilot.data$GVA_n+1/pilot.data$GVV_n+((ME[,2])^2/(2*(pilot.data$GVA_n+pilot.data$GVV_n))))
),ncol=3)
result<-meta(ME,MEVCOV,model.name="Random effects model")
summary(result)
r<-0
MEVCOV<-matrix(c(((1/pilot.data$GVA_n)+(1/pilot.data$GVV_n)+(ME[,1]^2/(2*(pilot.data$GVA_n+pilot.data$GVV_n))))
,(1/pilot.data$GVA_n+1/pilot.data$GVV_n)*r+(((pilot.data$GVA_CL_m-pilot.data$GVV_CL_m)/sqrt(pilot.data$CL_V)*(pilot.data$GVA_LP_m-pilot.data$GVV_LP_m)/sqrt(pilot.data$LP_V))/2*(pilot.data$GVA_n+pilot.data$GVV_n))*(r^2)
,(1/pilot.data$GVA_n+1/pilot.data$GVV_n+((ME[,2])^2/(2*(pilot.data$GVA_n+pilot.data$GVV_n))))
),ncol=3)
result<-meta(ME,MEVCOV,model.name="Random effects model")
summary(result)
