Cov<-list(Cov1,Cov2)
#Means for the two groups
Mean<-list(c(5.50,4.05),c(5.55,3.43))
#Sample sizes for the gorups
N <-c(20,16)
#Assuming homogeneity of covariance matrices by
#using the same lables: "sd1", "sd2", and "r"
model4<-'eta1=~c("sd1","sd1")*LP
eta2=~c("sd2","sd2")*CL
eta1~~c("r","r")*eta2
LP~c("m1_1","m1_2")*1
CL~c("m2_1","m2_2")*1
LP~~0*LP
CL~~0*CL
# Multiple endpoint effect size 1
MELP:=(m1_2 - m1_1)/sd1
#Multiple endpoint effect size 2
MECL:=(m2_2 - m2_1)/sd2'
fit4<-sem(model4, sample.cov = Cov, sample.mean = Mean,
sample.nobs = N,std.lv = TRUE,
sample.cov.rescale = FALSE)
##Obtain the free parameters in the model
(x<-fit4@Fit@x)
##Obtain the sampling covariance matrix of the parameter estimates
(VCOV<-vcov(fit4))
##Compute the multivariate effect sizes
(ME<-fit4@Model@def.function(x))
##Compute the jacobian for 'defined parameters'
JAC<-lavaan:::lavJacobianD(func=fit4@Model@def.function, x=x)
##compute the sampling covariance matrix using delta method
ME.VCOV<-JAC%*% VCOV %*% t(JAC)
##Add the variable names for ease of reference
dimnames(ME.VCOV) <- list(names(ME),names(ME))
ME.VCOV
0, 2.25'
#control group
lower <- '10.24
0, 1.9321'
##Convert a lower triangle data into a covariance matrix
Cov1<-getCov(lower, diag=TRUE, name=c("LP","CL"))
##treatment group
lower <- '12.6736
0, 2.25'
##Convert a lower triangle data into a covraiance matrix
Cov2<-getCov(lower, diag=TRUE,name=c("LP","CL"))
#Convert covariance matrices into a list
Cov<-list(Cov1,Cov2)
#Means for the two groups
Mean<-list(c(5.50,4.05),c(5.55,3.43))
#Sample sizes for the gorups
N <-c(20,16)
#Assuming homogeneity of covariance matrices by
#using the same lables: "sd1", "sd2", and "r"
model4<-'eta1=~c("sd1","sd1")*LP
eta2=~c("sd2","sd2")*CL
eta1~~c("r","r")*eta2
LP~c("m1_1","m1_2")*1
CL~c("m2_1","m2_2")*1
LP~~0*LP
CL~~0*CL
# Multiple endpoint effect size 1
MELP:=(m1_2 - m1_1)/sd1
#Multiple endpoint effect size 2
MECL:=(m2_2 - m2_1)/sd2'
fit4<-sem(model4, sample.cov = Cov, sample.mean = Mean,
sample.nobs = N,std.lv = TRUE,
sample.cov.rescale = FALSE)
##Obtain the free parameters in the model
(x<-fit4@Fit@x)
##Obtain the sampling covariance matrix of the parameter estimates
(VCOV<-vcov(fit4))
##Compute the multivariate effect sizes
(ME<-fit4@Model@def.function(x))
##Compute the jacobian for 'defined parameters'
JAC<-lavaan:::lavJacobianD(func=fit4@Model@def.function, x=x)
##compute the sampling covariance matrix using delta method
ME.VCOV<-JAC%*% VCOV %*% t(JAC)
##Add the variable names for ease of reference
dimnames(ME.VCOV) <- list(names(ME),names(ME))
ME.VCOV
#control group
lower <- '0.0529
0, 0.04
0,0,0.0529'
##Convert a lower triangle data into a covariance matrix
Cov1<-getCov(lower, diag=TRUE, name=c("LP","CL"))
##treatment group
lower <- '0.0576
0, 0.0441
0,0,0.0576'
##Convert a lower triangle data into a covraiance matrix
Cov2<-getCov(lower, diag=TRUE,name=c("LP","CL"))
#Convert covariance matrices into a list
Cov<-list(Cov1,Cov2)
#Means for the two groups
Mean<-list(c(9.66,2.47,2.78),c(9.09,1.73,2.13))
#Sample sizes for the gorups
N <-c(16,15)
#Assuming homogeneity of covariance matrices by
#using the same lables: "sd1", "sd2", and "r"
model4<-'eta1=~c("sd1","sd1")*LP
eta2=~c("sd2","sd2")*CL
eta1~~c("r","r")*eta2
LP~c("m1_1","m1_2")*1
CL~c("m2_1","m2_2")*1
LP~~0*LP
CL~~0*CL
# Multiple endpoint effect size 1
MELP:=(m1_2 - m1_1)/sd1
#Multiple endpoint effect size 2
MECL:=(m2_2 - m2_1)/sd2'
fit4<-sem(model4, sample.cov = Cov, sample.mean = Mean,
sample.nobs = N,std.lv = TRUE,
sample.cov.rescale = FALSE)
##Obtain the free parameters in the model
(x<-fit4@Fit@x)
##Obtain the sampling covariance matrix of the parameter estimates
(VCOV<-vcov(fit4))
##Compute the multivariate effect sizes
(ME<-fit4@Model@def.function(x))
##Compute the jacobian for 'defined parameters'
JAC<-lavaan:::lavJacobianD(func=fit4@Model@def.function, x=x)
##compute the sampling covariance matrix using delta method
ME.VCOV<-JAC%*% VCOV %*% t(JAC)
##Add the variable names for ease of reference
dimnames(ME.VCOV) <- list(names(ME),names(ME))
ME.VCOV
ME<-c((pilot.data$GVA_LP_m-pilot.data$GVV_LP_m)/sqrt(pilot.data$LP_V),(pilot.data$GVA_CL_m-pilot.data$GVV_CL_m)/sqrt(pilot.data$CL_V))
print(ME)
ME<-c((pilot.data$GVA_LP_m-pilot.data$GVV_LP_m)/sqrt(pilot.data$LP_V),(pilot.data$GVA_CL_m-pilot.data$GVV_CL_m)/sqrt(pilot.data$CL_V),ncol=2)
print(ME)
ME<-matrix((pilot.data$GVA_LP_m-pilot.data$GVV_LP_m)/sqrt(pilot.data$LP_V),(pilot.data$GVA_CL_m-pilot.data$GVV_CL_m)/sqrt(pilot.data$CL_V),ncol=2)
ME<-matrix(c(((pilot.data$GVA_LP_m-pilot.data$GVV_LP_m)/sqrt(pilot.data$LP_V),(pilot.data$GVA_CL_m-pilot.data$GVV_CL_m)/sqrt(pilot.data$CL_V)),ncol=2)
ME<-matrix(c((pilot.data$GVA_LP_m-pilot.data$GVV_LP_m)/sqrt(pilot.data$LP_V),(pilot.data$GVA_CL_m-pilot.data$GVV_CL_m)/sqrt(pilot.data$CL_V)),ncol=2)
print(ME)
r<-0
MEVCOV<-matrix(c((1/pilot.data$GVA_n+1/pilot.data$GVV_n+((pilot.data$GVA_LP_m-pilot.data$GVV_LP_m)/sqrt(pilot.data$LP_V)^2/2*(pilot.data$GVA_n+pilot.data$GVV_n)))
,(1/pilot.data$GVA_n+1/pilot.data$GVV_n)*r+(((pilot.data$GVA_CL_m-pilot.data$GVV_CL_m)/sqrt(pilot.data$CL_V)*(pilot.data$GVA_LP_m-pilot.data$GVV_LP_m)/sqrt(pilot.data$LP_V))/2*(pilot.data$GVA_n+pilot.data$GVV_n))*(r^2)
,(1/pilot.data$GVA_n+1/pilot.data$GVV_n+((pilot.data$GVA_CL_m-pilot.data$GVV_CL_m)/sqrt(pilot.data$CL_V)^2/2*(pilot.data$GVA_n+pilot.data$GVV_n)))
),ncol=3)
print(MEVCOV)
meta(ME,MEVCOV)
result<-meta(ME,MEVCOV)
summary(result)
result<-meta(ME,MEVCOV,model.name="Random effects model")
summary(result)
print(MEVCOV)
lower
lower <- '10.24
0, 1.9321'
lower
r<-0
MEVCOV<-matrix(c((1/pilot.data$GVA_n+1/pilot.data$GVV_n+(((pilot.data$GVA_LP_m-pilot.data$GVV_LP_m)/sqrt(pilot.data$LP_V))^2/2*(pilot.data$GVA_n+pilot.data$GVV_n)))
,(1/pilot.data$GVA_n+1/pilot.data$GVV_n)*r+(((pilot.data$GVA_CL_m-pilot.data$GVV_CL_m)/sqrt(pilot.data$CL_V)*(pilot.data$GVA_LP_m-pilot.data$GVV_LP_m)/sqrt(pilot.data$LP_V))/2*(pilot.data$GVA_n+pilot.data$GVV_n))*(r^2)
,(1/pilot.data$GVA_n+1/pilot.data$GVV_n+(((pilot.data$GVA_CL_m-pilot.data$GVV_CL_m)/sqrt(pilot.data$CL_V))^2/2*(pilot.data$GVA_n+pilot.data$GVV_n)))
),ncol=3)
print(MEVCOV)
r<-0
MEVCOV<-matrix(c((1/pilot.data$GVA_n+1/pilot.data$GVV_n+(((pilot.data$GVA_LP_m-pilot.data$GVV_LP_m)/sqrt(pilot.data$LP_V))^2/2*(pilot.data$GVA_n+pilot.data$GVV_n)))
,(1/pilot.data$GVA_n+1/pilot.data$GVV_n)*r+(((pilot.data$GVA_CL_m-pilot.data$GVV_CL_m)/sqrt(pilot.data$CL_V)*(pilot.data$GVA_LP_m-pilot.data$GVV_LP_m)/sqrt(pilot.data$LP_V))/2*(pilot.data$GVA_n+pilot.data$GVV_n))*(r^2)
,(1/pilot.data$GVA_n+1/pilot.data$GVV_n+(((pilot.data$GVA_CL_m-pilot.data$GVV_CL_m)/sqrt(pilot.data$CL_V))^2/2*(pilot.data$GVA_n+pilot.data$GVV_n)))
),ncol=3)
print(ME)
print(MEVCOV)
MEVCOV<-matrix(c((1/pilot.data$GVA_n+1/pilot.data$GVV_n+((((pilot.data$GVA_LP_m-pilot.data$GVV_LP_m)/sqrt(pilot.data$LP_V))^2)/2*(pilot.data$GVA_n+pilot.data$GVV_n)))
,(1/pilot.data$GVA_n+1/pilot.data$GVV_n)*r+(((pilot.data$GVA_CL_m-pilot.data$GVV_CL_m)/sqrt(pilot.data$CL_V)*(pilot.data$GVA_LP_m-pilot.data$GVV_LP_m)/sqrt(pilot.data$LP_V))/2*(pilot.data$GVA_n+pilot.data$GVV_n))*(r^2)
,(1/pilot.data$GVA_n+1/pilot.data$GVV_n+((((pilot.data$GVA_CL_m-pilot.data$GVV_CL_m)/sqrt(pilot.data$CL_V))^2)/2*(pilot.data$GVA_n+pilot.data$GVV_n)))
),ncol=3)
print(MEVCOV)
MEVCOV<-matrix(c((1/pilot.data$GVA_n+1/pilot.data$GVV_n+((ME[,1])^2/2*(pilot.data$GVA_n+pilot.data$GVV_n)))
,(1/pilot.data$GVA_n+1/pilot.data$GVV_n)*r+(((pilot.data$GVA_CL_m-pilot.data$GVV_CL_m)/sqrt(pilot.data$CL_V)*(pilot.data$GVA_LP_m-pilot.data$GVV_LP_m)/sqrt(pilot.data$LP_V))/2*(pilot.data$GVA_n+pilot.data$GVV_n))*(r^2)
,(1/pilot.data$GVA_n+1/pilot.data$GVV_n+((ME[,2])^2/2*(pilot.data$GVA_n+pilot.data$GVV_n)))
),ncol=3)
print(MEVCOV)
MEVCOV<-matrix(c((1/pilot.data$GVA_n+1/pilot.data$GVV_n+(1/2*(pilot.data$GVA_n+pilot.data$GVV_n)))
MEVCOV<-matrix(c((1/pilot.data$GVA_n+1/pilot.data$GVV_n+(1/2*(pilot.data$GVA_n+pilot.data$GVV_n)))
,(1/pilot.data$GVA_n+1/pilot.data$GVV_n)*r+(((pilot.data$GVA_CL_m-pilot.data$GVV_CL_m)/sqrt(pilot.data$CL_V)*(pilot.data$GVA_LP_m-pilot.data$GVV_LP_m)/sqrt(pilot.data$LP_V))/2*(pilot.data$GVA_n+pilot.data$GVV_n))*(r^2)
,(1/pilot.data$GVA_n+1/pilot.data$GVV_n+((ME[,2])^2/2*(pilot.data$GVA_n+pilot.data$GVV_n)))
),ncol=3)
MEVCOV<-matrix(c((1/pilot.data$GVA_n+1/pilot.data$GVV_n+(1/2*(pilot.data$GVA_n+pilot.data$GVV_n)))
,(1/pilot.data$GVA_n+1/pilot.data$GVV_n)*r+(((pilot.data$GVA_CL_m-pilot.data$GVV_CL_m)/sqrt(pilot.data$CL_V)*(pilot.data$GVA_LP_m-pilot.data$GVV_LP_m)/sqrt(pilot.data$LP_V))/2*(pilot.data$GVA_n+pilot.data$GVV_n))*(r^2)
,(1/pilot.data$GVA_n+1/pilot.data$GVV_n+((ME[,2])^2/2*(pilot.data$GVA_n+pilot.data$GVV_n)))
),ncol=3)
print(MEVCOV)
MEVCOV<-matrix(c(((1/pilot.data$GVA_n)+(1/pilot.data$GVV_n)+(1/2*(pilot.data$GVA_n+pilot.data$GVV_n)))
,(1/pilot.data$GVA_n+1/pilot.data$GVV_n)*r+(((pilot.data$GVA_CL_m-pilot.data$GVV_CL_m)/sqrt(pilot.data$CL_V)*(pilot.data$GVA_LP_m-pilot.data$GVV_LP_m)/sqrt(pilot.data$LP_V))/2*(pilot.data$GVA_n+pilot.data$GVV_n))*(r^2)
,(1/pilot.data$GVA_n+1/pilot.data$GVV_n+((ME[,2])^2/2*(pilot.data$GVA_n+pilot.data$GVV_n)))
),ncol=3)
print(MEVCOV)
1/pilot.data$GVA_n
1/pilot.data$GVA_n+1/pilot.data$GVV_n
1/pilot.data$GVA_n+1/pilot.data$GVV_n++(1/2*(pilot.data$GVA_n+pilot.data$GVV_n))
(1/2*(pilot.data$GVA_n+pilot.data$GVV_n))
(1/(2*(pilot.data$GVA_n+pilot.data$GVV_n))
1/(2*(pilot.data$GVA_n+pilot.data$GVV_n))
x<-1/(2*(pilot.data$GVA_n+pilot.data$GVV_n))
print(x)
MEVCOV<-matrix(c(((1/pilot.data$GVA_n)+(1/pilot.data$GVV_n)+(ME[,1]^2/(2*(pilot.data$GVA_n+pilot.data$GVV_n))))
,(1/pilot.data$GVA_n+1/pilot.data$GVV_n)*r+(((pilot.data$GVA_CL_m-pilot.data$GVV_CL_m)/sqrt(pilot.data$CL_V)*(pilot.data$GVA_LP_m-pilot.data$GVV_LP_m)/sqrt(pilot.data$LP_V))/2*(pilot.data$GVA_n+pilot.data$GVV_n))*(r^2)
,(1/pilot.data$GVA_n+1/pilot.data$GVV_n+((ME[,2])^2/(2*(pilot.data$GVA_n+pilot.data$GVV_n))))
),ncol=3)
print(MEVCOV)
result<-meta(ME,MEVCOV,model.name="Random effects model")
summary(result)
1.810071 0.777015'
lower<-'5.906044
1.810071 0.777015'
Cov1<-getCov(lower, diag=TRUE)
View(Cov1)
cov2cor(Cov1)
r<-1
MEVCOV<-matrix(c(((1/pilot.data$GVA_n)+(1/pilot.data$GVV_n)+(ME[,1]^2/(2*(pilot.data$GVA_n+pilot.data$GVV_n))))
,(1/pilot.data$GVA_n+1/pilot.data$GVV_n)*r+(((pilot.data$GVA_CL_m-pilot.data$GVV_CL_m)/sqrt(pilot.data$CL_V)*(pilot.data$GVA_LP_m-pilot.data$GVV_LP_m)/sqrt(pilot.data$LP_V))/2*(pilot.data$GVA_n+pilot.data$GVV_n))*(r^2)
,(1/pilot.data$GVA_n+1/pilot.data$GVV_n+((ME[,2])^2/(2*(pilot.data$GVA_n+pilot.data$GVV_n))))
),ncol=3)
result<-meta(ME,MEVCOV,model.name="Random effects model")
summary(result)
r<-0.9
MEVCOV<-matrix(c(((1/pilot.data$GVA_n)+(1/pilot.data$GVV_n)+(ME[,1]^2/(2*(pilot.data$GVA_n+pilot.data$GVV_n))))
,(1/pilot.data$GVA_n+1/pilot.data$GVV_n)*r+(((pilot.data$GVA_CL_m-pilot.data$GVV_CL_m)/sqrt(pilot.data$CL_V)*(pilot.data$GVA_LP_m-pilot.data$GVV_LP_m)/sqrt(pilot.data$LP_V))/2*(pilot.data$GVA_n+pilot.data$GVV_n))*(r^2)
,(1/pilot.data$GVA_n+1/pilot.data$GVV_n+((ME[,2])^2/(2*(pilot.data$GVA_n+pilot.data$GVV_n))))
),ncol=3)
result<-meta(ME,MEVCOV,model.name="Random effects model")
summary(result)
r<-0.25
MEVCOV<-matrix(c(((1/pilot.data$GVA_n)+(1/pilot.data$GVV_n)+(ME[,1]^2/(2*(pilot.data$GVA_n+pilot.data$GVV_n))))
,(1/pilot.data$GVA_n+1/pilot.data$GVV_n)*r+(((pilot.data$GVA_CL_m-pilot.data$GVV_CL_m)/sqrt(pilot.data$CL_V)*(pilot.data$GVA_LP_m-pilot.data$GVV_LP_m)/sqrt(pilot.data$LP_V))/2*(pilot.data$GVA_n+pilot.data$GVV_n))*(r^2)
,(1/pilot.data$GVA_n+1/pilot.data$GVV_n+((ME[,2])^2/(2*(pilot.data$GVA_n+pilot.data$GVV_n))))
),ncol=3)
result<-meta(ME,MEVCOV,model.name="Random effects model")
summary(result)
r<-0.01
MEVCOV<-matrix(c(((1/pilot.data$GVA_n)+(1/pilot.data$GVV_n)+(ME[,1]^2/(2*(pilot.data$GVA_n+pilot.data$GVV_n))))
,(1/pilot.data$GVA_n+1/pilot.data$GVV_n)*r+(((pilot.data$GVA_CL_m-pilot.data$GVV_CL_m)/sqrt(pilot.data$CL_V)*(pilot.data$GVA_LP_m-pilot.data$GVV_LP_m)/sqrt(pilot.data$LP_V))/2*(pilot.data$GVA_n+pilot.data$GVV_n))*(r^2)
,(1/pilot.data$GVA_n+1/pilot.data$GVV_n+((ME[,2])^2/(2*(pilot.data$GVA_n+pilot.data$GVV_n))))
),ncol=3)
summary(result)
r<-0
MEVCOV<-matrix(c(((1/pilot.data$GVA_n)+(1/pilot.data$GVV_n)+(ME[,1]^2/(2*(pilot.data$GVA_n+pilot.data$GVV_n))))
,(1/pilot.data$GVA_n+1/pilot.data$GVV_n)*r+(((pilot.data$GVA_CL_m-pilot.data$GVV_CL_m)/sqrt(pilot.data$CL_V)*(pilot.data$GVA_LP_m-pilot.data$GVV_LP_m)/sqrt(pilot.data$LP_V))/2*(pilot.data$GVA_n+pilot.data$GVV_n))*(r^2)
,(1/pilot.data$GVA_n+1/pilot.data$GVV_n+((ME[,2])^2/(2*(pilot.data$GVA_n+pilot.data$GVV_n))))
),ncol=3)
summary(result)
r<-0.25
MEVCOV<-matrix(c(((1/pilot.data$GVA_n)+(1/pilot.data$GVV_n)+(ME[,1]^2/(2*(pilot.data$GVA_n+pilot.data$GVV_n))))
,(1/pilot.data$GVA_n+1/pilot.data$GVV_n)*r+(((pilot.data$GVA_CL_m-pilot.data$GVV_CL_m)/sqrt(pilot.data$CL_V)*(pilot.data$GVA_LP_m-pilot.data$GVV_LP_m)/sqrt(pilot.data$LP_V))/2*(pilot.data$GVA_n+pilot.data$GVV_n))*(r^2)
,(1/pilot.data$GVA_n+1/pilot.data$GVV_n+((ME[,2])^2/(2*(pilot.data$GVA_n+pilot.data$GVV_n))))
),ncol=3)
result<-meta(ME,MEVCOV,model.name="Random effects model")
summary(result)
r<-0
MEVCOV<-matrix(c(((1/pilot.data$GVA_n)+(1/pilot.data$GVV_n)+(ME[,1]^2/(2*(pilot.data$GVA_n+pilot.data$GVV_n))))
,(1/pilot.data$GVA_n+1/pilot.data$GVV_n)*r+(((pilot.data$GVA_CL_m-pilot.data$GVV_CL_m)/sqrt(pilot.data$CL_V)*(pilot.data$GVA_LP_m-pilot.data$GVV_LP_m)/sqrt(pilot.data$LP_V))/2*(pilot.data$GVA_n+pilot.data$GVV_n))*(r^2)
,(1/pilot.data$GVA_n+1/pilot.data$GVV_n+((ME[,2])^2/(2*(pilot.data$GVA_n+pilot.data$GVV_n))))
),ncol=3)
result<-meta(ME,MEVCOV,model.name="Random effects model")
summary(result)
RTCL<-read.csv("~/pilot050220156/pilot data_lp and cl.csv")
pilot.data_r.and.t.and.cl <- read.csv("C:/Users/hsye/Desktop/pilot050220156/pilot data_r and t and cl.csv")
View(pilot.data_r.and.t.and.cl)
RTCL <- read.csv("C:/Users/hsye/Desktop/pilot050220156/pilot data_r and t and cl.csv")
RTCL <- read.csv("C:/Users/hsye/Desktop/pilot050220156/pilot data_r and t and cl.csv")
#print(RTCL)
#calculate RECALL performance variance group va
RTCL$GVA_R_V<-RTCL$GVA_LP_sd^2
#calculate recall performance variance group vv
RTCL$GVV_R_V<-RTCL$GVV_LP_sd^2
#calculate recall performance sample covariance
RTCL$R_V<-(RTCL$GVA_R_sd^2*(RTCL$GVA_n-1)+RTCL$GVV_R_sd^2*(RTCL$GVV_n-1))/(RTCL$GVA_n+RTCL$GVV_n-2)
#calculate transfer performance variance group va
RTCL$GVA_T_V<-RTCL$GVA_LP_sd^2
#calculate transfer performance variance group vv
RTCL$GVV_T_V<-RTCL$GVV_LP_sd^2
#calculate transfer performance sample covariance
RTCL$T_V<-(RTCL$GVA_T_sd^2*(RTCL$GVA_n-1)+RTCL$GVV_T_sd^2*(RTCL$GVV_n-1))/(RTCL$GVA_n+RTCL$GVV_n-2)
#calculate cL variance group va
RTCL$GVA_CL_V<-RTCL$GVA_CL_sd^2
#calculate CL varnce group vv
RTCL$GVV_CL_V<-RTCL$GVV_CL_sd^2
#calculate CL sample covariance
RTCL$CL_V<-(RTCL$GVA_CL_sd^2*(RTCL$GVA_n-1)+RTCL$GVV_CL_sd^2*(RTCL$GVV_n-1))/(RTCL$GVA_n+RTCL$GVV_n-2)
#calculate effect sizes
ME<-matrix(c((RTCL$GVA_R_m-RTCL$GVV_R_m)/sqrt(RTCL$LP_V)
,(RTCL$GVA_T_m-RTCL$GVV_T_m)/sqrt(RTCL$LP_V)
,(RTCL$GVA_CL_m-RTCL$GVV_CL_m)/sqrt(RTCL$CL_V))
,ncol=2)
ME<-matrix(c((RTCL$GVA_R_m-RTCL$GVV_R_m)/sqrt(RTCL$R_V)
,(RTCL$GVA_T_m-RTCL$GVV_T_m)/sqrt(RTCL$T_V)
,(RTCL$GVA_CL_m-RTCL$GVV_CL_m)/sqrt(RTCL$CL_V))
,ncol=2)
print(ME)
pilot.data<-read.csv("~/pilot050220156/pilot data_lp and cl.csv")
#print(pilot.data)
#calculate learning performance variance group va
pilot.data$GVA_LP_V<-pilot.data$GVA_LP_sd^2
#calculate learning performance variance group vv
pilot.data$GVV_LP_V<-pilot.data$GVV_LP_sd^2
#calculate learning performance sample covariance
pilot.data$LP_V<-(pilot.data$GVA_LP_sd^2*(pilot.data$GVA_n-1)+pilot.data$GVV_LP_sd^2*(pilot.data$GVV_n-1))/(pilot.data$GVA_n+pilot.data$GVV_n-2)
#calculate learning performance variance group va
pilot.data$GVA_CL_V<-pilot.data$GVA_CL_sd^2
#calculate learning performance varnce group vv
pilot.data$GVV_CL_V<-pilot.data$GVV_CL_sd^2
#calculate cognitive load sample covariance
pilot.data$CL_V<-(pilot.data$GVA_CL_sd^2*(pilot.data$GVA_n-1)+pilot.data$GVV_CL_sd^2*(pilot.data$GVV_n-1))/(pilot.data$GVA_n+pilot.data$GVV_n-2)
#calculate effect sizes
ME<-matrix(c((pilot.data$GVA_LP_m-pilot.data$GVV_LP_m)/sqrt(pilot.data$LP_V),(pilot.data$GVA_CL_m-pilot.data$GVV_CL_m)/sqrt(pilot.data$CL_V)),ncol=2)
#assume r=0
r<-0
MEVCOV<-matrix(c(((1/pilot.data$GVA_n)+(1/pilot.data$GVV_n)+(ME[,1]^2/(2*(pilot.data$GVA_n+pilot.data$GVV_n))))
,(1/pilot.data$GVA_n+1/pilot.data$GVV_n)*r+(((pilot.data$GVA_CL_m-pilot.data$GVV_CL_m)/sqrt(pilot.data$CL_V)*(pilot.data$GVA_LP_m-pilot.data$GVV_LP_m)/sqrt(pilot.data$LP_V))/2*(pilot.data$GVA_n+pilot.data$GVV_n))*(r^2)
,(1/pilot.data$GVA_n+1/pilot.data$GVV_n+((ME[,2])^2/(2*(pilot.data$GVA_n+pilot.data$GVV_n))))
),ncol=3)
result<-meta(ME,MEVCOV,model.name="Random effects model")
print(ME)
print(MEVCOV)
summary(result)
#print(pilot.data)
lower<-'5.906044
1.810071 0.777015'
Cov1<-getCov(lower, diag=TRUE)
cov2cor(Cov1)
library("metaSEM")
pilot.data<-read.csv("~/pilot050220156/pilot data_lp and cl.csv")
#print(pilot.data)
#calculate learning performance variance group va
pilot.data$GVA_LP_V<-pilot.data$GVA_LP_sd^2
#calculate learning performance variance group vv
pilot.data$GVV_LP_V<-pilot.data$GVV_LP_sd^2
#calculate learning performance sample covariance
pilot.data$LP_V<-(pilot.data$GVA_LP_sd^2*(pilot.data$GVA_n-1)+pilot.data$GVV_LP_sd^2*(pilot.data$GVV_n-1))/(pilot.data$GVA_n+pilot.data$GVV_n-2)
#calculate learning performance variance group va
pilot.data$GVA_CL_V<-pilot.data$GVA_CL_sd^2
#calculate learning performance varnce group vv
pilot.data$GVV_CL_V<-pilot.data$GVV_CL_sd^2
#calculate cognitive load sample covariance
pilot.data$CL_V<-(pilot.data$GVA_CL_sd^2*(pilot.data$GVA_n-1)+pilot.data$GVV_CL_sd^2*(pilot.data$GVV_n-1))/(pilot.data$GVA_n+pilot.data$GVV_n-2)
#calculate effect sizes
ME<-matrix(c((pilot.data$GVA_LP_m-pilot.data$GVV_LP_m)/sqrt(pilot.data$LP_V),(pilot.data$GVA_CL_m-pilot.data$GVV_CL_m)/sqrt(pilot.data$CL_V)),ncol=2)
#assume r=0
r<-0
MEVCOV<-matrix(c(((1/pilot.data$GVA_n)+(1/pilot.data$GVV_n)+(ME[,1]^2/(2*(pilot.data$GVA_n+pilot.data$GVV_n))))
,(1/pilot.data$GVA_n+1/pilot.data$GVV_n)*r+(((pilot.data$GVA_CL_m-pilot.data$GVV_CL_m)/sqrt(pilot.data$CL_V)*(pilot.data$GVA_LP_m-pilot.data$GVV_LP_m)/sqrt(pilot.data$LP_V))/2*(pilot.data$GVA_n+pilot.data$GVV_n))*(r^2)
,(1/pilot.data$GVA_n+1/pilot.data$GVV_n+((ME[,2])^2/(2*(pilot.data$GVA_n+pilot.data$GVV_n))))
),ncol=3)
result<-meta(ME,MEVCOV,model.name="Random effects model")
print(ME)
print(MEVCOV)
summary(result)
#print(pilot.data)
lower<-'5.906044
1.810071 0.777015'
Cov1<-getCov(lower, diag=TRUE)
cov2cor(Cov1)
library("lavaan")
pilot.data<-read.csv("~/pilot050220156/pilot data_lp and cl.csv")
#print(pilot.data)
#calculate learning performance variance group va
pilot.data$GVA_LP_V<-pilot.data$GVA_LP_sd^2
#calculate learning performance variance group vv
pilot.data$GVV_LP_V<-pilot.data$GVV_LP_sd^2
#calculate learning performance sample covariance
pilot.data$LP_V<-(pilot.data$GVA_LP_sd^2*(pilot.data$GVA_n-1)+pilot.data$GVV_LP_sd^2*(pilot.data$GVV_n-1))/(pilot.data$GVA_n+pilot.data$GVV_n-2)
#calculate learning performance variance group va
pilot.data$GVA_CL_V<-pilot.data$GVA_CL_sd^2
#calculate learning performance varnce group vv
pilot.data$GVV_CL_V<-pilot.data$GVV_CL_sd^2
#calculate cognitive load sample covariance
pilot.data$CL_V<-(pilot.data$GVA_CL_sd^2*(pilot.data$GVA_n-1)+pilot.data$GVV_CL_sd^2*(pilot.data$GVV_n-1))/(pilot.data$GVA_n+pilot.data$GVV_n-2)
#calculate effect sizes
ME<-matrix(c((pilot.data$GVA_LP_m-pilot.data$GVV_LP_m)/sqrt(pilot.data$LP_V),(pilot.data$GVA_CL_m-pilot.data$GVV_CL_m)/sqrt(pilot.data$CL_V)),ncol=2)
#assume r=0
r<-0
MEVCOV<-matrix(c(((1/pilot.data$GVA_n)+(1/pilot.data$GVV_n)+(ME[,1]^2/(2*(pilot.data$GVA_n+pilot.data$GVV_n))))
,(1/pilot.data$GVA_n+1/pilot.data$GVV_n)*r+(((pilot.data$GVA_CL_m-pilot.data$GVV_CL_m)/sqrt(pilot.data$CL_V)*(pilot.data$GVA_LP_m-pilot.data$GVV_LP_m)/sqrt(pilot.data$LP_V))/2*(pilot.data$GVA_n+pilot.data$GVV_n))*(r^2)
,(1/pilot.data$GVA_n+1/pilot.data$GVV_n+((ME[,2])^2/(2*(pilot.data$GVA_n+pilot.data$GVV_n))))
),ncol=3)
result<-meta(ME,MEVCOV,model.name="Random effects model")
print(ME)
print(MEVCOV)
summary(result)
#print(pilot.data)
lower<-'5.906044
1.810071 0.777015'
Cov1<-getCov(lower, diag=TRUE)
cov2cor(Cov1)
clear
ME<-matrix(c((RTCL$GVA_R_m-RTCL$GVV_R_m)/sqrt(RTCL$R_V)
,(RTCL$GVA_T_m-RTCL$GVV_T_m)/sqrt(RTCL$T_V)
,(RTCL$GVA_CL_m-RTCL$GVV_CL_m)/sqrt(RTCL$CL_V))
,ncol=3)
print(ME)
r<-0
MEVCOV<-matrix(c(((1/RTCL$GVA_n)+(1/RTCL$GVV_n)+(ME[,1]^2/(2*(RTCL$GVA_n+RTCL$GVV_n))))#RR
,(1/RTCL$GVA_n+1/RTCL$GVV_n)*r+(((RTCL$GVA_T_m-RTCL$GVV_T_m)/sqrt(RTCL$T_V)*(RTCL$GVA_R_m-RTCL$GVV_R_m)/sqrt(RTCL$R_V))/2*(RTCL$GVA_n+RTCL$GVV_n))*(r^2)#RT
,((1/RTCL$GVA_n)+(1/RTCL$GVV_n)+(ME[,2]^2/(2*(RTCL$GVA_n+RTCL$GVV_n))))#TT
,(1/RTCL$GVA_n+1/RTCL$GVV_n)*r+(((RTCL$GVA_CL_m-RTCL$GVV_CL_m)/sqrt(RTCL$CL_V)*(RTCL$GVA_R_m-RTCL$GVV_R_m)/sqrt(RTCL$R_V))/2*(RTCL$GVA_n+RTCL$GVV_n))*(r^2)#RCL
,(1/RTCL$GVA_n+1/RTCL$GVV_n)*r+(((RTCL$GVA_CL_m-RTCL$GVV_CL_m)/sqrt(RTCL$CL_V)*(RTCL$GVA_T_m-RTCL$GVV_T_m)/sqrt(RTCL$T_V))/2*(RTCL$GVA_n+RTCL$GVV_n))*(r^2)#TCL
,(1/RTCL$GVA_n+1/RTCL$GVV_n+((ME[,3])^2/(2*(RTCL$GVA_n+RTCL$GVV_n))))#CLCL
),ncol=6)
print(MEVCOV)
result<-meta(ME,MEVCOV,model.name="Random effects model")
result<-meta(ME,MEVCOV,model.name="Random effects model")
result<-meta(ME,MEVCOV)
r<-0
ME.VCOV<-matrix(c(((1/RTCL$GVA_n)+(1/RTCL$GVV_n)+(ME[,1]^2/(2*(RTCL$GVA_n+RTCL$GVV_n))))#RR
,(1/RTCL$GVA_n+1/RTCL$GVV_n)*r+(((RTCL$GVA_T_m-RTCL$GVV_T_m)/sqrt(RTCL$T_V)*(RTCL$GVA_R_m-RTCL$GVV_R_m)/sqrt(RTCL$R_V))/2*(RTCL$GVA_n+RTCL$GVV_n))*(r^2)#RT
,((1/RTCL$GVA_n)+(1/RTCL$GVV_n)+(ME[,2]^2/(2*(RTCL$GVA_n+RTCL$GVV_n))))#TT
,(1/RTCL$GVA_n+1/RTCL$GVV_n)*r+(((RTCL$GVA_CL_m-RTCL$GVV_CL_m)/sqrt(RTCL$CL_V)*(RTCL$GVA_R_m-RTCL$GVV_R_m)/sqrt(RTCL$R_V))/2*(RTCL$GVA_n+RTCL$GVV_n))*(r^2)#RCL
,(1/RTCL$GVA_n+1/RTCL$GVV_n)*r+(((RTCL$GVA_CL_m-RTCL$GVV_CL_m)/sqrt(RTCL$CL_V)*(RTCL$GVA_T_m-RTCL$GVV_T_m)/sqrt(RTCL$T_V))/2*(RTCL$GVA_n+RTCL$GVV_n))*(r^2)#TCL
,(1/RTCL$GVA_n+1/RTCL$GVV_n+((ME[,3])^2/(2*(RTCL$GVA_n+RTCL$GVV_n))))#CLCL
),ncol=6)
print(ME.VCOV)
result<-meta(ME,ME.VCOV,model.name="Random effects model")
ME<-ME[-c(18,19,20),]
print(ME)
ME.VCOV<-ME.VCOV[-c(18,19,20),]
print(ME.VCOV)
result<-meta(ME,ME.VCOV,model.name="Random effects model")
ME<-ME[c(9,11,12),]
ME.VCOV<-ME.VCOV[c(9,11,12),]
print(ME)
print(ME.VCOV)
result<-meta(ME,ME.VCOV,model.name="Random effects model")
result<-meta(ME,ME.VCOV)
ME<-ME[c(9,11,12),c(1,2)]
ME.VCOV<-ME.VCOV[c(9,11,12),c(1,2)]
ME<-matrix(c((RTCL$GVA_R_m-RTCL$GVV_R_m)/sqrt(RTCL$R_V)
,(RTCL$GVA_T_m-RTCL$GVV_T_m)/sqrt(RTCL$T_V)
,(RTCL$GVA_CL_m-RTCL$GVV_CL_m)/sqrt(RTCL$CL_V))
,ncol=3)
#assume r=0
r<-0
ME.VCOV<-matrix(c(((1/RTCL$GVA_n)+(1/RTCL$GVV_n)+(ME[,1]^2/(2*(RTCL$GVA_n+RTCL$GVV_n))))#RR
,(1/RTCL$GVA_n+1/RTCL$GVV_n)*r+(((RTCL$GVA_T_m-RTCL$GVV_T_m)/sqrt(RTCL$T_V)*(RTCL$GVA_R_m-RTCL$GVV_R_m)/sqrt(RTCL$R_V))/2*(RTCL$GVA_n+RTCL$GVV_n))*(r^2)#RT
,((1/RTCL$GVA_n)+(1/RTCL$GVV_n)+(ME[,2]^2/(2*(RTCL$GVA_n+RTCL$GVV_n))))#TT
,(1/RTCL$GVA_n+1/RTCL$GVV_n)*r+(((RTCL$GVA_CL_m-RTCL$GVV_CL_m)/sqrt(RTCL$CL_V)*(RTCL$GVA_R_m-RTCL$GVV_R_m)/sqrt(RTCL$R_V))/2*(RTCL$GVA_n+RTCL$GVV_n))*(r^2)#RCL
,(1/RTCL$GVA_n+1/RTCL$GVV_n)*r+(((RTCL$GVA_CL_m-RTCL$GVV_CL_m)/sqrt(RTCL$CL_V)*(RTCL$GVA_T_m-RTCL$GVV_T_m)/sqrt(RTCL$T_V))/2*(RTCL$GVA_n+RTCL$GVV_n))*(r^2)#TCL
,(1/RTCL$GVA_n+1/RTCL$GVV_n+((ME[,3])^2/(2*(RTCL$GVA_n+RTCL$GVV_n))))#CLCL
),ncol=6)
ME<-ME[c(9,11,12),c(1,2)]
ME.VCOV<-ME.VCOV[c(9,11,12),c(1,2)]
print(ME)
print(ME.VCOV)
ME.VCOV<-matrix(c(((1/RTCL$GVA_n)+(1/RTCL$GVV_n)+(ME[,1]^2/(2*(RTCL$GVA_n+RTCL$GVV_n))))#RR
,(1/RTCL$GVA_n+1/RTCL$GVV_n)*r+(((RTCL$GVA_T_m-RTCL$GVV_T_m)/sqrt(RTCL$T_V)*(RTCL$GVA_R_m-RTCL$GVV_R_m)/sqrt(RTCL$R_V))/2*(RTCL$GVA_n+RTCL$GVV_n))*(r^2)#RT
,((1/RTCL$GVA_n)+(1/RTCL$GVV_n)+(ME[,2]^2/(2*(RTCL$GVA_n+RTCL$GVV_n))))#TT
,(1/RTCL$GVA_n+1/RTCL$GVV_n)*r+(((RTCL$GVA_CL_m-RTCL$GVV_CL_m)/sqrt(RTCL$CL_V)*(RTCL$GVA_R_m-RTCL$GVV_R_m)/sqrt(RTCL$R_V))/2*(RTCL$GVA_n+RTCL$GVV_n))*(r^2)#RCL
,(1/RTCL$GVA_n+1/RTCL$GVV_n)*r+(((RTCL$GVA_CL_m-RTCL$GVV_CL_m)/sqrt(RTCL$CL_V)*(RTCL$GVA_T_m-RTCL$GVV_T_m)/sqrt(RTCL$T_V))/2*(RTCL$GVA_n+RTCL$GVV_n))*(r^2)#TCL
,(1/RTCL$GVA_n+1/RTCL$GVV_n+((ME[,3])^2/(2*(RTCL$GVA_n+RTCL$GVV_n))))#CLCL
),ncol=6)
ME<-matrix(c((RTCL$GVA_R_m-RTCL$GVV_R_m)/sqrt(RTCL$R_V)
,(RTCL$GVA_T_m-RTCL$GVV_T_m)/sqrt(RTCL$T_V)
,(RTCL$GVA_CL_m-RTCL$GVV_CL_m)/sqrt(RTCL$CL_V))
,ncol=3)
#assume r=0
r<-0
ME.VCOV<-matrix(c(((1/RTCL$GVA_n)+(1/RTCL$GVV_n)+(ME[,1]^2/(2*(RTCL$GVA_n+RTCL$GVV_n))))#RR
,(1/RTCL$GVA_n+1/RTCL$GVV_n)*r+(((RTCL$GVA_T_m-RTCL$GVV_T_m)/sqrt(RTCL$T_V)*(RTCL$GVA_R_m-RTCL$GVV_R_m)/sqrt(RTCL$R_V))/2*(RTCL$GVA_n+RTCL$GVV_n))*(r^2)#RT
,((1/RTCL$GVA_n)+(1/RTCL$GVV_n)+(ME[,2]^2/(2*(RTCL$GVA_n+RTCL$GVV_n))))#TT
,(1/RTCL$GVA_n+1/RTCL$GVV_n)*r+(((RTCL$GVA_CL_m-RTCL$GVV_CL_m)/sqrt(RTCL$CL_V)*(RTCL$GVA_R_m-RTCL$GVV_R_m)/sqrt(RTCL$R_V))/2*(RTCL$GVA_n+RTCL$GVV_n))*(r^2)#RCL
,(1/RTCL$GVA_n+1/RTCL$GVV_n)*r+(((RTCL$GVA_CL_m-RTCL$GVV_CL_m)/sqrt(RTCL$CL_V)*(RTCL$GVA_T_m-RTCL$GVV_T_m)/sqrt(RTCL$T_V))/2*(RTCL$GVA_n+RTCL$GVV_n))*(r^2)#TCL
,(1/RTCL$GVA_n+1/RTCL$GVV_n+((ME[,3])^2/(2*(RTCL$GVA_n+RTCL$GVV_n))))#CLCL
),ncol=6)
result<-meta(ME,ME.VCOV)
print(ME)
print(ME.VCOV)
ME<-ME[c(9,11,12),c(1,2)]
ME.VCOV<-ME.VCOV[c(9,11,12),c(1,2,3)]
print(ME)
print(ME.VCOV)
result<-meta(ME,ME.VCOV)
summary(result)
ME<-matrix(c((RTCL$GVA_R_m-RTCL$GVV_R_m)/sqrt(RTCL$R_V)
,(RTCL$GVA_T_m-RTCL$GVV_T_m)/sqrt(RTCL$T_V)
,(RTCL$GVA_CL_m-RTCL$GVV_CL_m)/sqrt(RTCL$CL_V))
,ncol=3)
#assume r=0
r<-0
ME.VCOV<-matrix(c(((1/RTCL$GVA_n)+(1/RTCL$GVV_n)+(ME[,1]^2/(2*(RTCL$GVA_n+RTCL$GVV_n))))#RR
,(1/RTCL$GVA_n+1/RTCL$GVV_n)*r+(((RTCL$GVA_T_m-RTCL$GVV_T_m)/sqrt(RTCL$T_V)*(RTCL$GVA_R_m-RTCL$GVV_R_m)/sqrt(RTCL$R_V))/2*(RTCL$GVA_n+RTCL$GVV_n))*(r^2)#RT
,((1/RTCL$GVA_n)+(1/RTCL$GVV_n)+(ME[,2]^2/(2*(RTCL$GVA_n+RTCL$GVV_n))))#TT
,(1/RTCL$GVA_n+1/RTCL$GVV_n)*r+(((RTCL$GVA_CL_m-RTCL$GVV_CL_m)/sqrt(RTCL$CL_V)*(RTCL$GVA_R_m-RTCL$GVV_R_m)/sqrt(RTCL$R_V))/2*(RTCL$GVA_n+RTCL$GVV_n))*(r^2)#RCL
,(1/RTCL$GVA_n+1/RTCL$GVV_n)*r+(((RTCL$GVA_CL_m-RTCL$GVV_CL_m)/sqrt(RTCL$CL_V)*(RTCL$GVA_T_m-RTCL$GVV_T_m)/sqrt(RTCL$T_V))/2*(RTCL$GVA_n+RTCL$GVV_n))*(r^2)#TCL
,(1/RTCL$GVA_n+1/RTCL$GVV_n+((ME[,3])^2/(2*(RTCL$GVA_n+RTCL$GVV_n))))#CLCL
),ncol=6)
ME<-ME[,c(1,2)]
ME.VCOV<-ME.VCOV[,c(1,2,3)]
result<-meta(ME,ME.VCOV)
summary(result)
result<-meta3(ME,ME.VCOV)
print(ME)
print(ME.VCOV)
ME<-ME[,c(1,2)]
ME.VCOV<-ME.VCOV[,c(1,2,3)]
ME<-matrix(c((RTCL$GVA_R_m-RTCL$GVV_R_m)/sqrt(RTCL$R_V)
,(RTCL$GVA_T_m-RTCL$GVV_T_m)/sqrt(RTCL$T_V)
,(RTCL$GVA_CL_m-RTCL$GVV_CL_m)/sqrt(RTCL$CL_V))
,ncol=3)
#assume r=0
r<-0
ME.VCOV<-matrix(c(((1/RTCL$GVA_n)+(1/RTCL$GVV_n)+(ME[,1]^2/(2*(RTCL$GVA_n+RTCL$GVV_n))))#RR
,(1/RTCL$GVA_n+1/RTCL$GVV_n)*r+(((RTCL$GVA_T_m-RTCL$GVV_T_m)/sqrt(RTCL$T_V)*(RTCL$GVA_R_m-RTCL$GVV_R_m)/sqrt(RTCL$R_V))/2*(RTCL$GVA_n+RTCL$GVV_n))*(r^2)#RT
,((1/RTCL$GVA_n)+(1/RTCL$GVV_n)+(ME[,2]^2/(2*(RTCL$GVA_n+RTCL$GVV_n))))#TT
,(1/RTCL$GVA_n+1/RTCL$GVV_n)*r+(((RTCL$GVA_CL_m-RTCL$GVV_CL_m)/sqrt(RTCL$CL_V)*(RTCL$GVA_R_m-RTCL$GVV_R_m)/sqrt(RTCL$R_V))/2*(RTCL$GVA_n+RTCL$GVV_n))*(r^2)#RCL
,(1/RTCL$GVA_n+1/RTCL$GVV_n)*r+(((RTCL$GVA_CL_m-RTCL$GVV_CL_m)/sqrt(RTCL$CL_V)*(RTCL$GVA_T_m-RTCL$GVV_T_m)/sqrt(RTCL$T_V))/2*(RTCL$GVA_n+RTCL$GVV_n))*(r^2)#TCL
,(1/RTCL$GVA_n+1/RTCL$GVV_n+((ME[,3])^2/(2*(RTCL$GVA_n+RTCL$GVV_n))))#CLCL
),ncol=6)
print(ME)
print(ME.VCOV)
result<-meta3(ME,ME.VCOV, model.name = "Random effects model")
result<-meta(ME,ME.VCOV, model.name = "Random effects model")
