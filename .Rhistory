lower<-'5.906044
1.810071 0.777015'
Cov1<-getCov(lower, diag=TRUE)
cov2cor(Cov1)
library("metaSEM")
pilot.data<-read.csv("~/pilot050220156/pilot data_lp and cl.csv")
#print(pilot.data)
#calculate learning performance variance group va
pilot.data$GVA_LP_V<-pilot.data$GVA_LP_sd^2
#calculate learning performance variance group vv
pilot.data$GVV_LP_V<-pilot.data$GVV_LP_sd^2
#calculate learning performance sample covariance
pilot.data$LP_V<-(pilot.data$GVA_LP_sd^2*(pilot.data$GVA_n-1)+pilot.data$GVV_LP_sd^2*(pilot.data$GVV_n-1))/(pilot.data$GVA_n+pilot.data$GVV_n-2)
#calculate learning performance variance group va
pilot.data$GVA_CL_V<-pilot.data$GVA_CL_sd^2
#calculate learning performance varnce group vv
pilot.data$GVV_CL_V<-pilot.data$GVV_CL_sd^2
#calculate cognitive load sample covariance
pilot.data$CL_V<-(pilot.data$GVA_CL_sd^2*(pilot.data$GVA_n-1)+pilot.data$GVV_CL_sd^2*(pilot.data$GVV_n-1))/(pilot.data$GVA_n+pilot.data$GVV_n-2)
#calculate effect sizes
ME<-matrix(c((pilot.data$GVA_LP_m-pilot.data$GVV_LP_m)/sqrt(pilot.data$LP_V),(pilot.data$GVA_CL_m-pilot.data$GVV_CL_m)/sqrt(pilot.data$CL_V)),ncol=2)
#assume r=0
r<-0
MEVCOV<-matrix(c(((1/pilot.data$GVA_n)+(1/pilot.data$GVV_n)+(ME[,1]^2/(2*(pilot.data$GVA_n+pilot.data$GVV_n))))
,(1/pilot.data$GVA_n+1/pilot.data$GVV_n)*r+(((pilot.data$GVA_CL_m-pilot.data$GVV_CL_m)/sqrt(pilot.data$CL_V)*(pilot.data$GVA_LP_m-pilot.data$GVV_LP_m)/sqrt(pilot.data$LP_V))/2*(pilot.data$GVA_n+pilot.data$GVV_n))*(r^2)
,(1/pilot.data$GVA_n+1/pilot.data$GVV_n+((ME[,2])^2/(2*(pilot.data$GVA_n+pilot.data$GVV_n))))
),ncol=3)
result<-meta(ME,MEVCOV,model.name="Random effects model")
print(ME)
print(MEVCOV)
summary(result)
#print(pilot.data)
lower<-'5.906044
1.810071 0.777015'
Cov1<-getCov(lower, diag=TRUE)
cov2cor(Cov1)
library("lavaan")
pilot.data<-read.csv("~/pilot050220156/pilot data_lp and cl.csv")
#print(pilot.data)
#calculate learning performance variance group va
pilot.data$GVA_LP_V<-pilot.data$GVA_LP_sd^2
#calculate learning performance variance group vv
pilot.data$GVV_LP_V<-pilot.data$GVV_LP_sd^2
#calculate learning performance sample covariance
pilot.data$LP_V<-(pilot.data$GVA_LP_sd^2*(pilot.data$GVA_n-1)+pilot.data$GVV_LP_sd^2*(pilot.data$GVV_n-1))/(pilot.data$GVA_n+pilot.data$GVV_n-2)
#calculate learning performance variance group va
pilot.data$GVA_CL_V<-pilot.data$GVA_CL_sd^2
#calculate learning performance varnce group vv
pilot.data$GVV_CL_V<-pilot.data$GVV_CL_sd^2
#calculate cognitive load sample covariance
pilot.data$CL_V<-(pilot.data$GVA_CL_sd^2*(pilot.data$GVA_n-1)+pilot.data$GVV_CL_sd^2*(pilot.data$GVV_n-1))/(pilot.data$GVA_n+pilot.data$GVV_n-2)
#calculate effect sizes
ME<-matrix(c((pilot.data$GVA_LP_m-pilot.data$GVV_LP_m)/sqrt(pilot.data$LP_V),(pilot.data$GVA_CL_m-pilot.data$GVV_CL_m)/sqrt(pilot.data$CL_V)),ncol=2)
#assume r=0
r<-0
MEVCOV<-matrix(c(((1/pilot.data$GVA_n)+(1/pilot.data$GVV_n)+(ME[,1]^2/(2*(pilot.data$GVA_n+pilot.data$GVV_n))))
,(1/pilot.data$GVA_n+1/pilot.data$GVV_n)*r+(((pilot.data$GVA_CL_m-pilot.data$GVV_CL_m)/sqrt(pilot.data$CL_V)*(pilot.data$GVA_LP_m-pilot.data$GVV_LP_m)/sqrt(pilot.data$LP_V))/2*(pilot.data$GVA_n+pilot.data$GVV_n))*(r^2)
,(1/pilot.data$GVA_n+1/pilot.data$GVV_n+((ME[,2])^2/(2*(pilot.data$GVA_n+pilot.data$GVV_n))))
),ncol=3)
result<-meta(ME,MEVCOV,model.name="Random effects model")
print(ME)
print(MEVCOV)
summary(result)
#print(pilot.data)
lower<-'5.906044
1.810071 0.777015'
Cov1<-getCov(lower, diag=TRUE)
cov2cor(Cov1)
clear
ME<-matrix(c((RTCL$GVA_R_m-RTCL$GVV_R_m)/sqrt(RTCL$R_V)
,(RTCL$GVA_T_m-RTCL$GVV_T_m)/sqrt(RTCL$T_V)
,(RTCL$GVA_CL_m-RTCL$GVV_CL_m)/sqrt(RTCL$CL_V))
,ncol=3)
print(ME)
r<-0
MEVCOV<-matrix(c(((1/RTCL$GVA_n)+(1/RTCL$GVV_n)+(ME[,1]^2/(2*(RTCL$GVA_n+RTCL$GVV_n))))#RR
,(1/RTCL$GVA_n+1/RTCL$GVV_n)*r+(((RTCL$GVA_T_m-RTCL$GVV_T_m)/sqrt(RTCL$T_V)*(RTCL$GVA_R_m-RTCL$GVV_R_m)/sqrt(RTCL$R_V))/2*(RTCL$GVA_n+RTCL$GVV_n))*(r^2)#RT
,((1/RTCL$GVA_n)+(1/RTCL$GVV_n)+(ME[,2]^2/(2*(RTCL$GVA_n+RTCL$GVV_n))))#TT
,(1/RTCL$GVA_n+1/RTCL$GVV_n)*r+(((RTCL$GVA_CL_m-RTCL$GVV_CL_m)/sqrt(RTCL$CL_V)*(RTCL$GVA_R_m-RTCL$GVV_R_m)/sqrt(RTCL$R_V))/2*(RTCL$GVA_n+RTCL$GVV_n))*(r^2)#RCL
,(1/RTCL$GVA_n+1/RTCL$GVV_n)*r+(((RTCL$GVA_CL_m-RTCL$GVV_CL_m)/sqrt(RTCL$CL_V)*(RTCL$GVA_T_m-RTCL$GVV_T_m)/sqrt(RTCL$T_V))/2*(RTCL$GVA_n+RTCL$GVV_n))*(r^2)#TCL
,(1/RTCL$GVA_n+1/RTCL$GVV_n+((ME[,3])^2/(2*(RTCL$GVA_n+RTCL$GVV_n))))#CLCL
),ncol=6)
print(MEVCOV)
result<-meta(ME,MEVCOV,model.name="Random effects model")
result<-meta(ME,MEVCOV,model.name="Random effects model")
result<-meta(ME,MEVCOV)
r<-0
ME.VCOV<-matrix(c(((1/RTCL$GVA_n)+(1/RTCL$GVV_n)+(ME[,1]^2/(2*(RTCL$GVA_n+RTCL$GVV_n))))#RR
,(1/RTCL$GVA_n+1/RTCL$GVV_n)*r+(((RTCL$GVA_T_m-RTCL$GVV_T_m)/sqrt(RTCL$T_V)*(RTCL$GVA_R_m-RTCL$GVV_R_m)/sqrt(RTCL$R_V))/2*(RTCL$GVA_n+RTCL$GVV_n))*(r^2)#RT
,((1/RTCL$GVA_n)+(1/RTCL$GVV_n)+(ME[,2]^2/(2*(RTCL$GVA_n+RTCL$GVV_n))))#TT
,(1/RTCL$GVA_n+1/RTCL$GVV_n)*r+(((RTCL$GVA_CL_m-RTCL$GVV_CL_m)/sqrt(RTCL$CL_V)*(RTCL$GVA_R_m-RTCL$GVV_R_m)/sqrt(RTCL$R_V))/2*(RTCL$GVA_n+RTCL$GVV_n))*(r^2)#RCL
,(1/RTCL$GVA_n+1/RTCL$GVV_n)*r+(((RTCL$GVA_CL_m-RTCL$GVV_CL_m)/sqrt(RTCL$CL_V)*(RTCL$GVA_T_m-RTCL$GVV_T_m)/sqrt(RTCL$T_V))/2*(RTCL$GVA_n+RTCL$GVV_n))*(r^2)#TCL
,(1/RTCL$GVA_n+1/RTCL$GVV_n+((ME[,3])^2/(2*(RTCL$GVA_n+RTCL$GVV_n))))#CLCL
),ncol=6)
print(ME.VCOV)
result<-meta(ME,ME.VCOV,model.name="Random effects model")
ME<-ME[-c(18,19,20),]
print(ME)
ME.VCOV<-ME.VCOV[-c(18,19,20),]
print(ME.VCOV)
result<-meta(ME,ME.VCOV,model.name="Random effects model")
ME<-ME[c(9,11,12),]
ME.VCOV<-ME.VCOV[c(9,11,12),]
print(ME)
print(ME.VCOV)
result<-meta(ME,ME.VCOV,model.name="Random effects model")
result<-meta(ME,ME.VCOV)
ME<-ME[c(9,11,12),c(1,2)]
ME.VCOV<-ME.VCOV[c(9,11,12),c(1,2)]
ME<-matrix(c((RTCL$GVA_R_m-RTCL$GVV_R_m)/sqrt(RTCL$R_V)
,(RTCL$GVA_T_m-RTCL$GVV_T_m)/sqrt(RTCL$T_V)
,(RTCL$GVA_CL_m-RTCL$GVV_CL_m)/sqrt(RTCL$CL_V))
,ncol=3)
#assume r=0
r<-0
ME.VCOV<-matrix(c(((1/RTCL$GVA_n)+(1/RTCL$GVV_n)+(ME[,1]^2/(2*(RTCL$GVA_n+RTCL$GVV_n))))#RR
,(1/RTCL$GVA_n+1/RTCL$GVV_n)*r+(((RTCL$GVA_T_m-RTCL$GVV_T_m)/sqrt(RTCL$T_V)*(RTCL$GVA_R_m-RTCL$GVV_R_m)/sqrt(RTCL$R_V))/2*(RTCL$GVA_n+RTCL$GVV_n))*(r^2)#RT
,((1/RTCL$GVA_n)+(1/RTCL$GVV_n)+(ME[,2]^2/(2*(RTCL$GVA_n+RTCL$GVV_n))))#TT
,(1/RTCL$GVA_n+1/RTCL$GVV_n)*r+(((RTCL$GVA_CL_m-RTCL$GVV_CL_m)/sqrt(RTCL$CL_V)*(RTCL$GVA_R_m-RTCL$GVV_R_m)/sqrt(RTCL$R_V))/2*(RTCL$GVA_n+RTCL$GVV_n))*(r^2)#RCL
,(1/RTCL$GVA_n+1/RTCL$GVV_n)*r+(((RTCL$GVA_CL_m-RTCL$GVV_CL_m)/sqrt(RTCL$CL_V)*(RTCL$GVA_T_m-RTCL$GVV_T_m)/sqrt(RTCL$T_V))/2*(RTCL$GVA_n+RTCL$GVV_n))*(r^2)#TCL
,(1/RTCL$GVA_n+1/RTCL$GVV_n+((ME[,3])^2/(2*(RTCL$GVA_n+RTCL$GVV_n))))#CLCL
),ncol=6)
ME<-ME[c(9,11,12),c(1,2)]
ME.VCOV<-ME.VCOV[c(9,11,12),c(1,2)]
print(ME)
print(ME.VCOV)
ME.VCOV<-matrix(c(((1/RTCL$GVA_n)+(1/RTCL$GVV_n)+(ME[,1]^2/(2*(RTCL$GVA_n+RTCL$GVV_n))))#RR
,(1/RTCL$GVA_n+1/RTCL$GVV_n)*r+(((RTCL$GVA_T_m-RTCL$GVV_T_m)/sqrt(RTCL$T_V)*(RTCL$GVA_R_m-RTCL$GVV_R_m)/sqrt(RTCL$R_V))/2*(RTCL$GVA_n+RTCL$GVV_n))*(r^2)#RT
,((1/RTCL$GVA_n)+(1/RTCL$GVV_n)+(ME[,2]^2/(2*(RTCL$GVA_n+RTCL$GVV_n))))#TT
,(1/RTCL$GVA_n+1/RTCL$GVV_n)*r+(((RTCL$GVA_CL_m-RTCL$GVV_CL_m)/sqrt(RTCL$CL_V)*(RTCL$GVA_R_m-RTCL$GVV_R_m)/sqrt(RTCL$R_V))/2*(RTCL$GVA_n+RTCL$GVV_n))*(r^2)#RCL
,(1/RTCL$GVA_n+1/RTCL$GVV_n)*r+(((RTCL$GVA_CL_m-RTCL$GVV_CL_m)/sqrt(RTCL$CL_V)*(RTCL$GVA_T_m-RTCL$GVV_T_m)/sqrt(RTCL$T_V))/2*(RTCL$GVA_n+RTCL$GVV_n))*(r^2)#TCL
,(1/RTCL$GVA_n+1/RTCL$GVV_n+((ME[,3])^2/(2*(RTCL$GVA_n+RTCL$GVV_n))))#CLCL
),ncol=6)
ME<-matrix(c((RTCL$GVA_R_m-RTCL$GVV_R_m)/sqrt(RTCL$R_V)
,(RTCL$GVA_T_m-RTCL$GVV_T_m)/sqrt(RTCL$T_V)
,(RTCL$GVA_CL_m-RTCL$GVV_CL_m)/sqrt(RTCL$CL_V))
,ncol=3)
#assume r=0
r<-0
ME.VCOV<-matrix(c(((1/RTCL$GVA_n)+(1/RTCL$GVV_n)+(ME[,1]^2/(2*(RTCL$GVA_n+RTCL$GVV_n))))#RR
,(1/RTCL$GVA_n+1/RTCL$GVV_n)*r+(((RTCL$GVA_T_m-RTCL$GVV_T_m)/sqrt(RTCL$T_V)*(RTCL$GVA_R_m-RTCL$GVV_R_m)/sqrt(RTCL$R_V))/2*(RTCL$GVA_n+RTCL$GVV_n))*(r^2)#RT
,((1/RTCL$GVA_n)+(1/RTCL$GVV_n)+(ME[,2]^2/(2*(RTCL$GVA_n+RTCL$GVV_n))))#TT
,(1/RTCL$GVA_n+1/RTCL$GVV_n)*r+(((RTCL$GVA_CL_m-RTCL$GVV_CL_m)/sqrt(RTCL$CL_V)*(RTCL$GVA_R_m-RTCL$GVV_R_m)/sqrt(RTCL$R_V))/2*(RTCL$GVA_n+RTCL$GVV_n))*(r^2)#RCL
,(1/RTCL$GVA_n+1/RTCL$GVV_n)*r+(((RTCL$GVA_CL_m-RTCL$GVV_CL_m)/sqrt(RTCL$CL_V)*(RTCL$GVA_T_m-RTCL$GVV_T_m)/sqrt(RTCL$T_V))/2*(RTCL$GVA_n+RTCL$GVV_n))*(r^2)#TCL
,(1/RTCL$GVA_n+1/RTCL$GVV_n+((ME[,3])^2/(2*(RTCL$GVA_n+RTCL$GVV_n))))#CLCL
),ncol=6)
result<-meta(ME,ME.VCOV)
print(ME)
print(ME.VCOV)
ME<-ME[c(9,11,12),c(1,2)]
ME.VCOV<-ME.VCOV[c(9,11,12),c(1,2,3)]
print(ME)
print(ME.VCOV)
result<-meta(ME,ME.VCOV)
summary(result)
ME<-matrix(c((RTCL$GVA_R_m-RTCL$GVV_R_m)/sqrt(RTCL$R_V)
,(RTCL$GVA_T_m-RTCL$GVV_T_m)/sqrt(RTCL$T_V)
,(RTCL$GVA_CL_m-RTCL$GVV_CL_m)/sqrt(RTCL$CL_V))
,ncol=3)
#assume r=0
r<-0
ME.VCOV<-matrix(c(((1/RTCL$GVA_n)+(1/RTCL$GVV_n)+(ME[,1]^2/(2*(RTCL$GVA_n+RTCL$GVV_n))))#RR
,(1/RTCL$GVA_n+1/RTCL$GVV_n)*r+(((RTCL$GVA_T_m-RTCL$GVV_T_m)/sqrt(RTCL$T_V)*(RTCL$GVA_R_m-RTCL$GVV_R_m)/sqrt(RTCL$R_V))/2*(RTCL$GVA_n+RTCL$GVV_n))*(r^2)#RT
,((1/RTCL$GVA_n)+(1/RTCL$GVV_n)+(ME[,2]^2/(2*(RTCL$GVA_n+RTCL$GVV_n))))#TT
,(1/RTCL$GVA_n+1/RTCL$GVV_n)*r+(((RTCL$GVA_CL_m-RTCL$GVV_CL_m)/sqrt(RTCL$CL_V)*(RTCL$GVA_R_m-RTCL$GVV_R_m)/sqrt(RTCL$R_V))/2*(RTCL$GVA_n+RTCL$GVV_n))*(r^2)#RCL
,(1/RTCL$GVA_n+1/RTCL$GVV_n)*r+(((RTCL$GVA_CL_m-RTCL$GVV_CL_m)/sqrt(RTCL$CL_V)*(RTCL$GVA_T_m-RTCL$GVV_T_m)/sqrt(RTCL$T_V))/2*(RTCL$GVA_n+RTCL$GVV_n))*(r^2)#TCL
,(1/RTCL$GVA_n+1/RTCL$GVV_n+((ME[,3])^2/(2*(RTCL$GVA_n+RTCL$GVV_n))))#CLCL
),ncol=6)
ME<-ME[,c(1,2)]
ME.VCOV<-ME.VCOV[,c(1,2,3)]
result<-meta(ME,ME.VCOV)
summary(result)
result<-meta3(ME,ME.VCOV)
print(ME)
print(ME.VCOV)
ME<-ME[,c(1,2)]
ME.VCOV<-ME.VCOV[,c(1,2,3)]
ME<-matrix(c((RTCL$GVA_R_m-RTCL$GVV_R_m)/sqrt(RTCL$R_V)
,(RTCL$GVA_T_m-RTCL$GVV_T_m)/sqrt(RTCL$T_V)
,(RTCL$GVA_CL_m-RTCL$GVV_CL_m)/sqrt(RTCL$CL_V))
,ncol=3)
#assume r=0
r<-0
ME.VCOV<-matrix(c(((1/RTCL$GVA_n)+(1/RTCL$GVV_n)+(ME[,1]^2/(2*(RTCL$GVA_n+RTCL$GVV_n))))#RR
,(1/RTCL$GVA_n+1/RTCL$GVV_n)*r+(((RTCL$GVA_T_m-RTCL$GVV_T_m)/sqrt(RTCL$T_V)*(RTCL$GVA_R_m-RTCL$GVV_R_m)/sqrt(RTCL$R_V))/2*(RTCL$GVA_n+RTCL$GVV_n))*(r^2)#RT
,((1/RTCL$GVA_n)+(1/RTCL$GVV_n)+(ME[,2]^2/(2*(RTCL$GVA_n+RTCL$GVV_n))))#TT
,(1/RTCL$GVA_n+1/RTCL$GVV_n)*r+(((RTCL$GVA_CL_m-RTCL$GVV_CL_m)/sqrt(RTCL$CL_V)*(RTCL$GVA_R_m-RTCL$GVV_R_m)/sqrt(RTCL$R_V))/2*(RTCL$GVA_n+RTCL$GVV_n))*(r^2)#RCL
,(1/RTCL$GVA_n+1/RTCL$GVV_n)*r+(((RTCL$GVA_CL_m-RTCL$GVV_CL_m)/sqrt(RTCL$CL_V)*(RTCL$GVA_T_m-RTCL$GVV_T_m)/sqrt(RTCL$T_V))/2*(RTCL$GVA_n+RTCL$GVV_n))*(r^2)#TCL
,(1/RTCL$GVA_n+1/RTCL$GVV_n+((ME[,3])^2/(2*(RTCL$GVA_n+RTCL$GVV_n))))#CLCL
),ncol=6)
print(ME)
print(ME.VCOV)
result<-meta3(ME,ME.VCOV, model.name = "Random effects model")
result<-meta(ME,ME.VCOV, model.name = "Random effects model")
RTCL <- read.csv("C:/Users/hsye/Desktop/pilot050220156/pilot data_r and t and cl.csv")
#print(RTCL)
#calculate RECALL performance variance group va
RTCL$GVA_R_V<-RTCL$GVA_LP_sd^2
#calculate recall performance variance group vv
RTCL$GVV_R_V<-RTCL$GVV_LP_sd^2
#calculate recall performance sample covariance
RTCL$R_V<-(RTCL$GVA_R_sd^2*(RTCL$GVA_n-1)+RTCL$GVV_R_sd^2*(RTCL$GVV_n-1))/(RTCL$GVA_n+RTCL$GVV_n-2)
#calculate transfer performance variance group va
RTCL$GVA_T_V<-RTCL$GVA_LP_sd^2
#calculate transfer performance variance group vv
RTCL$GVV_T_V<-RTCL$GVV_LP_sd^2
#calculate transfer performance sample covariance
RTCL$T_V<-(RTCL$GVA_T_sd^2*(RTCL$GVA_n-1)+RTCL$GVV_T_sd^2*(RTCL$GVV_n-1))/(RTCL$GVA_n+RTCL$GVV_n-2)
#calculate cL variance group va
RTCL$GVA_CL_V<-RTCL$GVA_CL_sd^2
#calculate CL varnce group vv
RTCL$GVV_CL_V<-RTCL$GVV_CL_sd^2
#calculate CL sample covariance
RTCL$CL_V<-(RTCL$GVA_CL_sd^2*(RTCL$GVA_n-1)+RTCL$GVV_CL_sd^2*(RTCL$GVV_n-1))/(RTCL$GVA_n+RTCL$GVV_n-2)
#calculate effect sizes
ME<-matrix(c((RTCL$GVA_R_m-RTCL$GVV_R_m)/sqrt(RTCL$R_V)
,(RTCL$GVA_T_m-RTCL$GVV_T_m)/sqrt(RTCL$T_V)
,(RTCL$GVA_CL_m-RTCL$GVV_CL_m)/sqrt(RTCL$CL_V))
,ncol=3)
View(ME)
View(RTCL)
r<-0
ME.VCOV<-matrix(c(((1/RTCL$GVA_n)+(1/RTCL$GVV_n)+(ME[,1]^2/(2*(RTCL$GVA_n+RTCL$GVV_n))))#RR
,(1/RTCL$GVA_n+1/RTCL$GVV_n)*r+(((RTCL$GVA_T_m-RTCL$GVV_T_m)/sqrt(RTCL$T_V)*(RTCL$GVA_R_m-RTCL$GVV_R_m)/sqrt(RTCL$R_V))/2*(RTCL$GVA_n+RTCL$GVV_n))*(r^2)#RT
,((1/RTCL$GVA_n)+(1/RTCL$GVV_n)+(ME[,2]^2/(2*(RTCL$GVA_n+RTCL$GVV_n))))#TT
,(1/RTCL$GVA_n+1/RTCL$GVV_n)*r+(((RTCL$GVA_CL_m-RTCL$GVV_CL_m)/sqrt(RTCL$CL_V)*(RTCL$GVA_R_m-RTCL$GVV_R_m)/sqrt(RTCL$R_V))/2*(RTCL$GVA_n+RTCL$GVV_n))*(r^2)#RCL
,(1/RTCL$GVA_n+1/RTCL$GVV_n)*r+(((RTCL$GVA_CL_m-RTCL$GVV_CL_m)/sqrt(RTCL$CL_V)*(RTCL$GVA_T_m-RTCL$GVV_T_m)/sqrt(RTCL$T_V))/2*(RTCL$GVA_n+RTCL$GVV_n))*(r^2)#TCL
,(1/RTCL$GVA_n+1/RTCL$GVV_n+((ME[,3])^2/(2*(RTCL$GVA_n+RTCL$GVV_n))))#CLCL
E.VCOV<-matrix(c(((1/RTCL$GVA_n)+(1/RTCL$GVV_n)+(ME[,1]^2/(2*(RTCL$GVA_n+RTCL$GVV_n))))#RR
,(1/RTCL$GVA_n+1/RTCL$GVV_n)*r+(((RTCL$GVA_T_m-RTCL$GVV_T_m)/sqrt(RTCL$T_V)*(RTCL$GVA_R_m-RTCL$GVV_R_m)/sqrt(RTCL$R_V))/2*(RTCL$GVA_n+RTCL$GVV_n))*(r^2)#RT
,((1/RTCL$GVA_n)+(1/RTCL$GVV_n)+(ME[,2]^2/(2*(RTCL$GVA_n+RTCL$GVV_n))))#TT
,(1/RTCL$GVA_n+1/RTCL$GVV_n)*r+(((RTCL$GVA_CL_m-RTCL$GVV_CL_m)/sqrt(RTCL$CL_V)*(RTCL$GVA_R_m-RTCL$GVV_R_m)/sqrt(RTCL$R_V))/2*(RTCL$GVA_n+RTCL$GVV_n))*(r^2)#RCL
,(1/RTCL$GVA_n+1/RTCL$GVV_n)*r+(((RTCL$GVA_CL_m-RTCL$GVV_CL_m)/sqrt(RTCL$CL_V)*(RTCL$GVA_T_m-RTCL$GVV_T_m)/sqrt(RTCL$T_V))/2*(RTCL$GVA_n+RTCL$GVV_n))*(r^2)#TCL
,(1/RTCL$GVA_n+1/RTCL$GVV_n+((ME[,3])^2/(2*(RTCL$GVA_n+RTCL$GVV_n))))#CLCL
),ncol=6)
ME.VCOV<-matrix(c(((1/RTCL$GVA_n)+(1/RTCL$GVV_n)+(ME[,1]^2/(2*(RTCL$GVA_n+RTCL$GVV_n))))#RR
,(1/RTCL$GVA_n+1/RTCL$GVV_n)*r+(((RTCL$GVA_T_m-RTCL$GVV_T_m)/sqrt(RTCL$T_V)*(RTCL$GVA_R_m-RTCL$GVV_R_m)/sqrt(RTCL$R_V))/2*(RTCL$GVA_n+RTCL$GVV_n))*(r^2)#RT
,((1/RTCL$GVA_n)+(1/RTCL$GVV_n)+(ME[,2]^2/(2*(RTCL$GVA_n+RTCL$GVV_n))))#TT
,(1/RTCL$GVA_n+1/RTCL$GVV_n)*r+(((RTCL$GVA_CL_m-RTCL$GVV_CL_m)/sqrt(RTCL$CL_V)*(RTCL$GVA_R_m-RTCL$GVV_R_m)/sqrt(RTCL$R_V))/2*(RTCL$GVA_n+RTCL$GVV_n))*(r^2)#RCL
,(1/RTCL$GVA_n+1/RTCL$GVV_n)*r+(((RTCL$GVA_CL_m-RTCL$GVV_CL_m)/sqrt(RTCL$CL_V)*(RTCL$GVA_T_m-RTCL$GVV_T_m)/sqrt(RTCL$T_V))/2*(RTCL$GVA_n+RTCL$GVV_n))*(r^2)#TCL
,(1/RTCL$GVA_n+1/RTCL$GVV_n+((ME[,3])^2/(2*(RTCL$GVA_n+RTCL$GVV_n))))#CLCL
),ncol=6)
View(ME.VCOV)
View(ME.VCOV)
result<-meta(ME,ME.VCOV, model.name = "Random effects model")
library(metaSEM)
result<-meta(ME,ME.VCOV, model.name = "Random effects model")
library("lavaan")
result<-meta(ME,ME.VCOV, model.name = "Random effects model")
View(ME)
View(ME.VCOV)
View(RTCL)
View(RTCL)
View(ME.VCOV)
View(RTCL)
View(ME)
View(ME.VCOV)
RTCL$var_R<-ME[1]
RTCL$var_R<-ME[1,]
RTCL$var_R<-ME[,1]
View(ME)
RTCL$ES_R<-ME[,1]
RTCL$ES_R<-ME[,1]
RTCL$ES_T<-ME[,2]
RTCL$ES_CL<-ME[,3]
RTCL$var_R<-NULL
RTCL$var_R<-ME.VCOV[,1]
RTCL$cov_R_T<-ME.VCOV[,2]
RTCL$var_T<-ME.VCOV[,3]
RTCL$cov_RCL<-ME.VCOV[,4]
RTCL$cov_TCL<-ME.VCOV[,5]
RTCL$var_CL<-ME.VCOV[,6]
RTCL$var_R<-ME.VCOV[,1]
RTCL$cov_R_T<-ME.VCOV[,2]
RTCL$var_T<-ME.VCOV[,3]
RTCL$cov_R_CL<-ME.VCOV[,4]
RTCL$cov_T_CL<-ME.VCOV[,5]
RTCL$var_CL<-ME.VCOV[,6]
RTCL$cov_RCL<-Null
RTCL$cov_RCL<-NULL
RTCL$cov_TCL<-NULL
result<-meta(y=cbind(ES_R,ES_T,ES_CL),v=cbind(var_R,cov_R_T,cov_R_CL,var_T,cov_T_CL,var_CL), model.name = "Random effects model")
result<-meta(y=cbind(ES_R,ES_T,ES_CL),v=cbind(var_R,cov_R_T,cov_R_CL,var_T,cov_T_CL,var_CL),data=RTCL, model.name = "Random effects model")
summary(result)
result1<-meta(y=cbind(ES_R,ES_T,ES_CL),v=cbind(var_R,cov_R_T,cov_R_CL,var_T,cov_T_CL,var_CL),data=RTCL, model.name = "Random effects model",RE.constraints = Diag(paste("0.1*Tau2",1:3,1:3,sep="_")))
summary(result1)
View(RTCL)
(T2<-vec2symMat(coef(result1,select="random")))
cov2cor(T2)
coef(result1)
coef(result1,select="random")
coef(result,select="random")
(T2<-vec2symMat(coef(result,select="random")))
plot(result1)
plot(result1,study.ellipse.plot = FALSE)
cov2cor(T2)
(T2<-vec2symMat(coef(result,select="random"), byrow = TRUE))
cov2cor(T2)
Workbook1 <- read.csv("~/OneDrive/Indiana2016/Dissertation/Method/Workbook1.csv")
View(Workbook1)
workbook1[21,]<-NULL
Workbook1[21,]<-NULL
MV<-read.csv("Workbook1.csv")
RTCL$MV_TL<-MV$textlength
RTCL$MV_PR<-MV$peerreview
RTCL$MV_PP<-MV$presentationpace
result1<-meta(y=cbind(ES_R,ES_T,ES_CL),v=cbind(var_R,cov_R_T,cov_R_CL,var_T,cov_T_CL,var_CL),x=cbind(MV_PP), data=RTCL, model.name = "Random effects model",RE.constraints = Diag(paste("0.1*Tau2",1:3,1:3,sep="_")))
result2<-meta(y=cbind(ES_R,ES_T,ES_CL),v=cbind(var_R,cov_R_T,cov_R_CL,var_T,cov_T_CL,var_CL),x=cbind(MV_PP), data=RTCL, model.name = "Random effects model",RE.constraints = Diag(paste("0.1*Tau2",1:3,1:3,sep="_")))
summary(result2)
result2<-meta(y=cbind(ES_R),v=cbind(var_R,cov_R_T,cov_R_CL,var_T,cov_T_CL,var_CL),x=cbind(MV_PP), data=RTCL, model.name = "Random effects model",RE.constraints = Diag(paste("0.1*Tau2",1:3,1:3,sep="_")))
result2<-meta(y=cbind(ES_R),v=cbind(var_R,cov_R_T,cov_R_CL,var_T,cov_T_CL,var_CL),x=cbind(MV_PP), data=RTCL, model.name = "Random effects model",RE.constraints = Diag(paste("0.1*Tau2",1:3,1:3,sep="_")))
result2<-meta(y=cbind(ES_R),v=cbind(var_R),x=cbind(MV_PP), data=RTCL, model.name = "Random effects model",RE.constraints = Diag(paste("0.1*Tau2",1:3,1:3,sep="_")))
result2<-meta(y=cbind(ES_R),v=cbind(var_R),x=cbind(MV_PP), data=RTCL, model.name = "Random effects model")
summary(result2)
plot(result2)
library(metafor)
install.packages("metafor")
library(metafor)
bubble(result2)
library(meta)
install.packages("meta")
library(meta)
bubble(result2)
attach(RTCL)
plot(MV_PP,ES_R,xlab="Presentation Pace", ylab="Effect size of retention")
plot(MV_PP,ES_R,xlab="Presentation Pace", ylab="Effect size of retention",xlim=(-1,2))
plot(MV_PP,ES_R,xlab="Presentation Pace", ylab="Effect size of retention",xlim=c(-1,2))
plot(MV_PP,ES_R,circle=ES_R,xlab="Presentation Pace", ylab="Effect size of retention",xlim=c(-1,2))
plot(MV_PP,ES_R,cex=ES_R,xlab="Presentation Pace", ylab="Effect size of retention",xlim=c(-1,2))
View(RTCL)
data("dat.colditz1994")
data10<-dat.colditz1994
mh2<-metabin(tpos,tpos+tneg,cpos,cpos+cneg,data=data10,studlab = paste(author,year))
summary(mh2)
table(data10$ablat)
mh2.mr<-metareg(mh2, ablat)
print(mh2.mr)
bubble(mh2.mr)
View(data10)
metacont(GVA_n,GVA_R_m,GVA_R_sd,GVV_n,GVV_R_m,GVV_R_sd,data=RTCL,method.smd = Cohen)
metacont(GVA_n,GVA_R_m,GVA_R_sd,GVV_n,GVV_R_m,GVV_R_sd,data=RTCL,method.smd = "Cohen")
result3<-metacont(GVA_n,GVA_R_m,GVA_R_sd,GVV_n,GVV_R_m,GVV_R_sd,data=RTCL,method.smd = "Cohen")
result3.mr<-metareg(result3,MV_PP)
bubble(result3.mr)
bubble.metareg(result3.mr)
bubble(mh2.mr)
print(result3.mr)
print(result3.mr)
bubble(result3.mr)
bubble(result3.mr, ylim=c(-10,10))
bubble(result3.mr, ylim=c(-10,10),xlim=(0,1))
bubble(result3.mr, ylim=c(-10,10),xlim=c(0,1))
temp<-read.csv("pilot data1.csv")
RTCL$GVA_SR_m<-temp$GVA_SR_m
RTCL$GVA_SR-sd<-temp$GVA_SR_sd
RTCL$GVV_SR_m<-temp$GVV_SR_m
RTCL$GVV_SR-sd<-temp$GVV_SR_sd
RTCL$GVA_SR_m<-temp$GVA_SR_m
RTCL$GVA_SR_sd<-temp$GVA_SR_sd
RTCL$GVV_SR_m<-temp$GVV_SR_m
RTCL$GVV_SR_sd<-temp$GVV_SR_sd
result3<-metacont(GVA_n,GVA_SR_m,GVA_SR_sd,GVV_n,GVV_SR_m,GVV_SR_sd,data=RTCL,method.smd = "Cohen")
View(RTCL)
temp<-read.csv("pilot data1.csv")
RTCL$GVA_SR_m<-temp$GVA_SR_m
RTCL$GVA_SR_sd<-temp$GVA_SR_sd
RTCL$GVV_SR_m<-temp$GVV_SR_m
RTCL$GVV_SR_sd<-temp$GVV_SR_sd
result3<-metacont(GVA_n,GVA_SR_m,GVA_SR_sd,GVV_n,GVV_SR_m,GVV_SR_sd,data=RTCL,method.smd = "Cohen")
result3.mr<-metareg(result3,MV_PP)
bubble.metareg(result3.mr)
bubble(result3.mr, ylim=c(-4,10),xlim=c(0,1))
bubble.metareg(result3.mr, ylim=c(-4,10),xlim(0,1))
bubble.metareg(result3.mr, ylim=c(-4,10),xlim=c(0,1))
bubble.metareg(result3.mr, ylim=c(-4,10),xlim=c(0,1))
print(result3)
result3<-metacont(GVA_n,GVA_SR_m,GVA_SR_sd,GVV_n,GVV_SR_m,GVV_SR_sd,data=RTCL)
result3.mr<-metareg(result3,MV_PP)
print(result3)
result3<-metacont(GVA_n,GVA_SR_m,GVA_SR_sd,GVV_n,GVV_SR_m,GVV_SR_sd,data=RTCL,sm="SMD")
result3.mr<-metareg(result3,MV_PP)
print(result3)
result3<-metacont(GVA_n,GVA_SR_m,GVA_SR_sd,GVV_n,GVV_SR_m,GVV_SR_sd,data=RTCL,sm="SMD", method.smd="Cohen")
print(result3)
result3.mr<-metareg(result3,MV_PP)
bubble.metareg(result3.mr, ylim=c(-4,10),xlim=c(0,1))
print(result3.mr)
result3.mr<-metareg(result3,MV_PP,comb.fixed=FALSE)
print(result3.mr)
result3.mr<-metareg(result3,MV_PP)
print(result3.mr)
result2<-meta(y=cbind(ES_R,ES_T,ES_CL),v=cbind(var_R,cov_R_T,cov_R_CL,var_T,cov_T_CL,var_CL),x=cbind(MV_PP,MV_PR), data=RTCL, model.name = "Random effects model")
result2<-meta(y=cbind(ES_R,ES_T,ES_CL),v=cbind(var_R,cov_R_T,cov_R_CL,var_T,cov_T_CL,var_CL),x=cbind(MV_PP,MV_PR), data=RTCL, model.name = "Random effects model",RE.constraints = Diag(paste("0.1*Tau2",1:3,1:3,sep="_")
summary(result2)
result2<-meta(y=cbind(ES_R,ES_T,ES_CL),v=cbind(var_R,cov_R_T,cov_R_CL,var_T,cov_T_CL,var_CL),x=cbind(MV_PP,MV_PR), data=RTCL, model.name = "Random effects model",RE.constraints = Diag(paste("0.1*Tau2",1:3,1:3,sep="_")
result2<-meta(y=cbind(ES_R,ES_T,ES_CL),v=cbind(var_R,cov_R_T,cov_R_CL,var_T,cov_T_CL,var_CL),x=cbind(MV_PP,MV_PR), data=RTCL, model.name = "Random effects model",RE.constraints = Diag(paste("0.1*Tau2",1:3,1:3,sep="_"))
result2<-meta(y=cbind(ES_R,ES_T,ES_CL),v=cbind(var_R,cov_R_T,cov_R_CL,var_T,cov_T_CL,var_CL),x=cbind(MV_PP,MV_PR), data=RTCL, model.name = "Random effects model",RE.constraints = Diag(paste("0.1*Tau2",1:3,1:3,sep="_")))
result2<-meta(y=cbind(ES_R,ES_T,ES_CL),v=cbind(var_R,cov_R_T,cov_R_CL,var_T,cov_T_CL,var_CL),x=cbind(MV_PP), data=RTCL, model.name = "Random effects model",RE.constraints = Diag(paste("0.1*Tau2",1:3,1:3,sep="_")))
summary(result2)
summary(result2)
result2<-meta(y=cbind(ES_R,ES_T,ES_CL),v=cbind(var_R,cov_R_T,cov_R_CL,var_T,cov_T_CL,var_CL),x=cbind(MV_PP), data=RTCL, model.name = "Random effects model",RE.constraints = Diag(paste("0.1*Tau2",1:3,1:3,sep="_")))
summary(result2)
result2<-meta(y=cbind(ES_R),v=cbind(var_R),x=cbind(MV_PP), data=RTCL, model.name = "Random effects model",RE.constraints = Diag(paste("0.1*Tau2",1:3,1:3,sep="_")))
summary(result2)
result2<-meta(y=cbind(ES_R),v=cbind(var_R),x=cbind(MV_PP), data=RTCL, model.name = "Random effects model")
summary(result2)
result1<-meta(y=cbind(ES_R,ES_T,ES_CL),v=cbind(var_R,cov_R_T,cov_R_CL,var_T,cov_T_CL,var_CL),data=RTCL, model.name = "Random effects model",RE.constraints = Diag(paste("0.1*Tau2",1:3,1:3,sep="_")))
summary(result1)
print(result1)
metaSEM::summay(result1)
metaSEM::summary(result1)
library(metaSEM)
RTCL <- read.csv("pilot data_r and t and cl.csv")
#print(RTCL)
#calculate RECALL performance variance group va
RTCL$GVA_R_V<-RTCL$GVA_LP_sd^2
#calculate recall performance variance group vv
RTCL$GVV_R_V<-RTCL$GVV_LP_sd^2
#calculate recall performance sample covariance
RTCL$R_V<-(RTCL$GVA_R_sd^2*(RTCL$GVA_n-1)+RTCL$GVV_R_sd^2*(RTCL$GVV_n-1))/(RTCL$GVA_n+RTCL$GVV_n-2)
#calculate transfer performance variance group va
RTCL$GVA_T_V<-RTCL$GVA_LP_sd^2
#calculate transfer performance variance group vv
RTCL$GVV_T_V<-RTCL$GVV_LP_sd^2
#calculate transfer performance sample covariance
RTCL$T_V<-(RTCL$GVA_T_sd^2*(RTCL$GVA_n-1)+RTCL$GVV_T_sd^2*(RTCL$GVV_n-1))/(RTCL$GVA_n+RTCL$GVV_n-2)
#calculate cL variance group va
RTCL$GVA_CL_V<-RTCL$GVA_CL_sd^2
#calculate CL varnce group vv
RTCL$GVV_CL_V<-RTCL$GVV_CL_sd^2
#calculate CL sample covariance
RTCL$CL_V<-(RTCL$GVA_CL_sd^2*(RTCL$GVA_n-1)+RTCL$GVV_CL_sd^2*(RTCL$GVV_n-1))/(RTCL$GVA_n+RTCL$GVV_n-2)
#calculate effect sizes
ME<-matrix(c((RTCL$GVA_R_m-RTCL$GVV_R_m)/sqrt(RTCL$R_V)
,(RTCL$GVA_T_m-RTCL$GVV_T_m)/sqrt(RTCL$T_V)
,(RTCL$GVA_CL_m-RTCL$GVV_CL_m)/sqrt(RTCL$CL_V))
,ncol=3)
#insert effect sizes to RTCL
RTCL$ES_R<-ME[,1]
RTCL$ES_T<-ME[,2]
RTCL$ES_CL<-ME[,3]
#assume r=0
r<-0
ME.VCOV<-matrix(c(((1/RTCL$GVA_n)+(1/RTCL$GVV_n)+(ME[,1]^2/(2*(RTCL$GVA_n+RTCL$GVV_n))))#RR
,(1/RTCL$GVA_n+1/RTCL$GVV_n)*r+(((RTCL$GVA_T_m-RTCL$GVV_T_m)/sqrt(RTCL$T_V)*(RTCL$GVA_R_m-RTCL$GVV_R_m)/sqrt(RTCL$R_V))/2*(RTCL$GVA_n+RTCL$GVV_n))*(r^2)#RT
,((1/RTCL$GVA_n)+(1/RTCL$GVV_n)+(ME[,2]^2/(2*(RTCL$GVA_n+RTCL$GVV_n))))#TT
,(1/RTCL$GVA_n+1/RTCL$GVV_n)*r+(((RTCL$GVA_CL_m-RTCL$GVV_CL_m)/sqrt(RTCL$CL_V)*(RTCL$GVA_R_m-RTCL$GVV_R_m)/sqrt(RTCL$R_V))/2*(RTCL$GVA_n+RTCL$GVV_n))*(r^2)#RCL
,(1/RTCL$GVA_n+1/RTCL$GVV_n)*r+(((RTCL$GVA_CL_m-RTCL$GVV_CL_m)/sqrt(RTCL$CL_V)*(RTCL$GVA_T_m-RTCL$GVV_T_m)/sqrt(RTCL$T_V))/2*(RTCL$GVA_n+RTCL$GVV_n))*(r^2)#TCL
,(1/RTCL$GVA_n+1/RTCL$GVV_n+((ME[,3])^2/(2*(RTCL$GVA_n+RTCL$GVV_n))))#CLCL
),ncol=6)
#insert covariate to RTCL
RTCL$var_R<-ME.VCOV[,1]
RTCL$cov_R_T<-ME.VCOV[,2]
RTCL$var_T<-ME.VCOV[,3]
RTCL$cov_R_CL<-ME.VCOV[,4]
RTCL$cov_T_CL<-ME.VCOV[,5]
RTCL$var_CL<-ME.VCOV[,6]
#ME<-ME[,c(1,2)]
#ME.VCOV<-ME.VCOV[,c(1,2,3)]
result<-meta(y=cbind(ES_R,ES_T,ES_CL),v=cbind(var_R,cov_R_T,cov_R_CL,var_T,cov_T_CL,var_CL),data=RTCL, model.name = "Random effects model")
result1<-meta(y=cbind(ES_R,ES_T,ES_CL),v=cbind(var_R,cov_R_T,cov_R_CL,var_T,cov_T_CL,var_CL),data=RTCL, model.name = "Random effects model",RE.constraints = Diag(paste("0.1*Tau2",1:3,1:3,sep="_")))
#Extract the variance component of the random effects
(T2<-vec2symMat(coef(result1,select="random")))
#Convert the covariance matrix to a correlation matrix
cov2cor(T2)
#lower<-'5.906044
#1.810071 0.777015'
#Cov1<-getCov(lower, diag=TRUE)
#cov2cor(Cov1)
print(ME)
print(ME.VCOV)
summary(result)
summary(result1)
result2<-meta(y=cbind(ES_R,ES_T,ES_CL),v=cbind(var_R,cov_R_T,cov_R_CL,var_T,cov_T_CL,var_CL),x=cbind(MV_PP), data=RTCL, model.name = "Random effects model",RE.constraints = Diag(paste("0.1*Tau2",1:3,1:3,sep="_")))
MV<-read.csv("Workbook1.csv")
RTCL$MV_TL<-MV$textlength
RTCL$MV_PR<-MV$peerreview
RTCL$MV_PP<-MV$presentationpace
result2<-meta(y=cbind(ES_R,ES_T,ES_CL),v=cbind(var_R,cov_R_T,cov_R_CL,var_T,cov_T_CL,var_CL),x=cbind(MV_PP), data=RTCL, model.name = "Random effects model",RE.constraints = Diag(paste("0.1*Tau2",1:3,1:3,sep="_")))
summary(result2)
library(meta)
summary(result2)
temp<-read.csv("pilot data1.csv")
RTCL$GVA_SR_m<-temp$GVA_SR_m
RTCL$GVA_SR_sd<-temp$GVA_SR_sd
RTCL$GVV_SR_m<-temp$GVV_SR_m
RTCL$GVV_SR_sd<-temp$GVV_SR_sd
result3<-metacont(GVA_n,GVA_SR_m,GVA_SR_sd,GVV_n,GVV_SR_m,GVV_SR_sd,data=RTCL,sm="SMD", method.smd="Cohen")
print(result3)
result3.mr<-metareg(result3,MV_PP)
print(result3.mr)
bubble.metareg(result3.mr, ylim=c(-4,10),xlim=c(0,1))
result3.mr<-metareg(result3,MV_PP+MV_PR)
print(result3.mr)
bubble.metareg(result3.mr, ylim=c(-4,10),xlim=c(0,1))
bubble(result3.mr, ylim=c(-4,10),xlim=c(0,1))
result3.mr<-metareg(result3,MV_PR+MV_PP)
print(result3.mr)
bubble(result3.mr, ylim=c(-4,10),xlim=c(0,1))
bubble(result3.mr, ylim=c(-4,10),xlim=c(0,1), cex.axis=axis(side=1, at=c(0:1)))
bubble(result3.mr, ylim=c(-4,10),xlim=c(0,1), cex.axis=axis(side=1, at=c(-1:2)),axis(side=2, at=seq(-4,10, by=1)))
bubble(result3.mr, ylim=c(-4,10),xlim=c(0,1), cex.axis=(axis(side=1, at=c(-1:2)),axis(side=2, at=seq(-4,10, by=1)))
bubble(result3.mr, ylim=c(-4,10),xlim=c(0,1), cex.axis=c(axis(side=1, at=c(-1:2)),axis(side=2, at=seq(-4,10, by=1)))
bubble(result3.mr, ylim=c(-4,10),xlim=c(0,1), cex.axis=c((axis(side=1, at=c(-1:2)),axis(side=2, at=seq(-4,10, by=1)))
bubble(result3.mr, ylim=c(-4,10),xlim=c(0,1), cex.axis=c((axis(side=1, at=c(-1:2)),axis(side=2, at=seq(-4,10, by=1)))
bubble(result3.mr, ylim=c(-4,10),xlim=c(0,1), cex.axis=c(axis(side=1, at=c(-1:2),axis(side=2, at=seq(-4,10, by=1)))))
bubble(result3.mr, ylim=c(-4,10),xlim=c(0,1), cex.axis=FALSE)
bubble(result3.mr, ylim=c(-4,10),xlim=c(0,1))
bubble(result3.mr, ylim=c(-4,10),xlim=c(-1,2))
bubble(result3.mr, ylim=c(-4,10),xlim=c(-1,2),regline=TRUE)
print(result3.mr)
cov_mv<-vec2symMat(result3.mr)
